<!DOCTYPE html>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if gt IE 8]><!-->
<html style="" class=" js no-touch svg inlinesvg svgclippaths no-ie8compat js no-touch svg inlinesvg svgclippaths no-ie8compat" lang="en"><!--<![endif]--><head>
  <meta charset="utf-8">

  <!-- Set the viewport width to device width for mobile -->
  <meta name="viewport" content="width=device-width">

  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="generator" content="Docutils 0.10: http://docutils.sourceforge.net/">
<title>Exercise 5: The Structure Of A C Program</title>

  <!-- Included CSS Files (Compressed) -->
  <link rel="stylesheet" href="Exercise%205%20%20The%20Structure%20Of%20A%20C%20Program_files/foundation.css">
  <link rel="stylesheet" href="Exercise%205%20%20The%20Structure%20Of%20A%20C%20Program_files/pygments.css">
  <link rel="stylesheet" href="Exercise%205%20%20The%20Structure%20Of%20A%20C%20Program_files/app.css">

  <script src="Exercise%205%20%20The%20Structure%20Of%20A%20C%20Program_files/ga.js" async="" type="text/javascript"></script><script src="Exercise%205%20%20The%20Structure%20Of%20A%20C%20Program_files/modernizr.js"></script>

  <!-- IE Fix for HTML5 Tags -->
  <!--[if lt IE 9]>
    <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->

</head>
<body>

  <div class="row">
      <div class="twelve columns" id="header">
          <div class="topbar">
              <div class="global-nav">
                  <div class="four columns" id="header-block">
                      <p><a href="http://c.learncodethehardway.org/">Learn C The Hard Way</a></p>
                  </div>
                  <div class="four columns" id="header-block">
                      <p style="color: white"><a href="http://inculcate.me/school/courses/4/">Online Video Course Plus PDFs $29</a></p>
                  </div>
                  <div class="four columns" id="header-block">
                      <p>
                      <a href="http://learnpythonthehardway.org/">Python</a> |
                      <a href="http://ruby.learncodethehardway.org/">Ruby</a> |
                      <a href="http://c.learncodethehardway.org/">C</a> |
                      <a href="http://sql.learncodethehardway.org/">SQL</a> |
                      <a href="http://regex.learncodethehardway.org/">Regex</a> 
                      </p>
                  </div>
              </div>
          </div>
          <h1 class="title">Exercise 5: The Structure Of A C Program</h1>
      </div>
  </div>

  <div class="row">
    <div class="eleven columns">
        <p>You know how to use <tt class="docutils literal">printf</tt> and have a couple basic tools at your disposal,
so let's break down a simple C program line-by-line so you know how one is
structured.  In this program you're going to type in a few more things that
you're unfamiliar with, and I'm going to lightly break them down.  Then in the
next few exercises we're going to work with these concepts.</p>
<div class="highlight"><pre><a name="code--ex5.c-pyg.html-1"></a><span class="cp">#include &lt;stdio.h&gt;</span>
<a name="code--ex5.c-pyg.html-2"></a>
<a name="code--ex5.c-pyg.html-3"></a><span class="cm">/* This is a comment. */</span>
<a name="code--ex5.c-pyg.html-4"></a><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<a name="code--ex5.c-pyg.html-5"></a><span class="p">{</span>
<a name="code--ex5.c-pyg.html-6"></a>    <span class="kt">int</span> <span class="n">distance</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
<a name="code--ex5.c-pyg.html-7"></a>
<a name="code--ex5.c-pyg.html-8"></a>    <span class="c1">// this is also a comment</span>
<a name="code--ex5.c-pyg.html-9"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"You are %d miles away.</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">distance</span><span class="p">);</span>
<a name="code--ex5.c-pyg.html-10"></a>
<a name="code--ex5.c-pyg.html-11"></a>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<a name="code--ex5.c-pyg.html-12"></a><span class="p">}</span>
</pre></div><p>Type this code in, make it run, and make sure you get <em>no Valgrind errors</em>.
You probably won't but get in the habit of checking it.</p>
<div class="section" id="what-you-should-see">
<h1>What You Should See</h1>
<p>This has pretty boring output, but the point of this exercise is to analyze the
code:</p>
<div class="highlight"><pre><a name="code--ex5.sh-session-pyg.html-1"></a><span class="gp">$</span> make ex5
<a name="code--ex5.sh-session-pyg.html-2"></a><span class="go">cc -Wall -g    ex5.c   -o ex5</span>
<a name="code--ex5.sh-session-pyg.html-3"></a><span class="gp">$</span> ./ex5
<a name="code--ex5.sh-session-pyg.html-4"></a><span class="go">You are 100 miles away.</span>
<a name="code--ex5.sh-session-pyg.html-5"></a><span class="gp">$</span>
</pre></div></div>
<div class="section" id="breaking-it-down">
<h1>Breaking It Down</h1>
<p>There's a few features of the C language in this code that you might have only
slightly figured out while you were typing code.  Let's break this down
line-by-line quickly, and then we can do exercises to understand each part
better:</p>
<dl class="docutils">
<dt>ex5.c:1</dt>
<dd>An <tt class="docutils literal">include</tt> and it is the way to import the contents
of one file into this source file.  C has a convention of using
<tt class="docutils literal">.h</tt> extensions for "header" files, which then contain lists
of functions you want to use in your program.</dd>
<dt>ex5.c:3</dt>
<dd>This is a multi-line <tt class="docutils literal">comment</tt> and you could put as many
lines of text between the <tt class="docutils literal">/*</tt> and closing <tt class="docutils literal">*/</tt> characters as you want.</dd>
<dt>ex5.c:4</dt>
<dd>A more complex version of the <tt class="docutils literal">main function</tt> you've
been using blindly so far.  How C programs work is the operating system
loads your program, and then runs the function named <tt class="docutils literal">main</tt>.
For the function to be totally complete it needs to return an <tt class="docutils literal">int</tt>
and take two parameters, an <tt class="docutils literal">int</tt> for the argument count, and
an array of <tt class="docutils literal">char *</tt> strings for the arguments.  Did that
just fly over your head?  Do not worry, we'll cover this soon.</dd>
<dt>ex5.c:5</dt>
<dd>To start the body of any function you write a <tt class="docutils literal">{</tt> character
that indicates the beginning of a "block".  In Python you just
did a <tt class="docutils literal">:</tt> and indented. In other languages you might have a
<tt class="docutils literal">begin</tt> or <tt class="docutils literal">do</tt> word to start.</dd>
<dt>ex5.c:6</dt>
<dd>A variable declaration and assignment at the same time.
This is how you create a variable, with the syntax <tt class="docutils literal">type name = value;</tt>.
In C statements (except for logic) end in a <tt class="docutils literal">';'</tt> (semicolon) character.</dd>
<dt>ex5.c:8</dt>
<dd>Another kind of comment, and it works like Python or
Ruby comments where it starts at the <tt class="docutils literal">//</tt> and goes until the end of
the line.</dd>
<dt>ex5.c:9</dt>
<dd>A call to your old friend <tt class="docutils literal">printf</tt>.  Like in many languages
function calls work with the syntax <tt class="docutils literal">name(arg1, arg2);</tt> and can have
no arguments, or any number.  The <tt class="docutils literal">printf</tt> function is actually
kind of weird and can take multiple arguments. We'll see that later.</dd>
<dt>ex5.c:11</dt>
<dd>A return from the main function, which gives the OS your exit
value.  You may not be familiar with how Unix software uses return
codes, so we'll cover that as well.</dd>
<dt>ex5.c:12</dt>
<dd>Finally, we end the main function with a closing brace <tt class="docutils literal">}</tt>
character and that's the end of the program.</dd>
</dl>
<p>There's a lot of information in this break-down, so study it line-by-line
and make sure you at least have a little grasp of what's going on.  You
won't know everything, but you can probably guess before we continue.</p>
</div>
<div class="section" id="extra-credit">
<h1>Extra Credit</h1>
<ul class="simple">
<li>For each line, write out the symbols you don't understand and
see if you can guess what they mean.  Write a little chart on
paper with your guess that you can use to check later and see
if you get it right.</li>
<li>Go back to the source code from the previous exercises and
do a similar break-down to see if you're getting it.  Write down
what you don't know and can't explain to yourself.</li>
</ul>
</div>
    </div>

    <div class="one columns" id="right-nav">
        <center>
        <p><a href="http://c.learncodethehardway.org/book/"><img src="Exercise%205%20%20The%20Structure%20Of%20A%20C%20Program_files/48_structure.png"></a></p>
        <p><a href="mailto:help@learncodethehardway.org"><img src="Exercise%205%20%20The%20Structure%20Of%20A%20C%20Program_files/48_email.png"></a></p>
        <p><a href="#faq"><img src="Exercise%205%20%20The%20Structure%20Of%20A%20C%20Program_files/48_faq.png"></a></p>
        <p><a href="http://inculcate.me/school/courses/4/"><img src="Exercise%205%20%20The%20Structure%20Of%20A%20C%20Program_files/48_video.png"></a></p>
        </center>
    </div>
    <div class="twelve columns" id="footer">
        <div class="four columns" id="footer-block">
            <p>
            <a href="http://learncodethehardway.org/">Copyright (C) 2010 Zed. A. Shaw</a>
            </p>
        </div>
        <div class="four columns" id="footer-block">
            <p>
            </p>
        </div>
        <div class="three columns" id="footer-block">
            <p>
            <a href="http://c.learncodethehardway.org/credits.html">Credits</a>
            </p>
        </div>
        <div class="one columns">
            &nbsp;
        </div>
    </div>

  <!-- Included JS Files (Compressed) -->
  <script src="Exercise%205%20%20The%20Structure%20Of%20A%20C%20Program_files/jquery.js"></script>
  <script src="Exercise%205%20%20The%20Structure%20Of%20A%20C%20Program_files/foundation.js"></script>
  
  <!-- Initialize JS Plugins -->
  <script src="Exercise%205%20%20The%20Structure%20Of%20A%20C%20Program_files/app.js"></script>

  <script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-24168052-8']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

  </script>


</div></body></html>