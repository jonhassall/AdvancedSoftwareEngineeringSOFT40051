<!DOCTYPE html>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if gt IE 8]><!-->
<html style="" class=" js no-touch svg inlinesvg svgclippaths no-ie8compat js no-touch svg inlinesvg svgclippaths no-ie8compat" lang="en"><!--<![endif]--><head>
  <meta charset="utf-8">

  <!-- Set the viewport width to device width for mobile -->
  <meta name="viewport" content="width=device-width">

  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="generator" content="Docutils 0.10: http://docutils.sourceforge.net/">
<title>Exercise 25: Variable Argument Functions</title>

  <!-- Included CSS Files (Compressed) -->
  <link rel="stylesheet" href="Exercise%2025%20%20Variable%20Argument%20Functions_files/foundation.css">
  <link rel="stylesheet" href="Exercise%2025%20%20Variable%20Argument%20Functions_files/pygments.css">
  <link rel="stylesheet" href="Exercise%2025%20%20Variable%20Argument%20Functions_files/app.css">

  <script src="Exercise%2025%20%20Variable%20Argument%20Functions_files/ga.js" async="" type="text/javascript"></script><script src="Exercise%2025%20%20Variable%20Argument%20Functions_files/modernizr.js"></script>

  <!-- IE Fix for HTML5 Tags -->
  <!--[if lt IE 9]>
    <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->

</head>
<body>

  <div class="row">
      <div class="twelve columns" id="header">
          <div class="topbar">
              <div class="global-nav">
                  <div class="four columns" id="header-block">
                      <p><a href="http://c.learncodethehardway.org/">Learn C The Hard Way</a></p>
                  </div>
                  <div class="four columns" id="header-block">
                      <p style="color: white"><a href="http://inculcate.me/school/courses/4/">Online Video Course Plus PDFs $29</a></p>
                  </div>
                  <div class="four columns" id="header-block">
                      <p>
                      <a href="http://learnpythonthehardway.org/">Python</a> |
                      <a href="http://ruby.learncodethehardway.org/">Ruby</a> |
                      <a href="http://c.learncodethehardway.org/">C</a> |
                      <a href="http://sql.learncodethehardway.org/">SQL</a> |
                      <a href="http://regex.learncodethehardway.org/">Regex</a> 
                      </p>
                  </div>
              </div>
          </div>
          <h1 class="title">Exercise 25: Variable Argument Functions</h1>
      </div>
  </div>

  <div class="row">
    <div class="eleven columns">
        <p>In C you can create your own versions of functions like <tt class="docutils literal">printf</tt> and
<tt class="docutils literal">scanf</tt> by creating a "variable argument function".  These functions use
the header <tt class="docutils literal">stdarg.h</tt> and with them you can create nicer interfaces to
your library.  They are handy for certain types of "builder" functions,
formatting functions, and anything that takes variable arguments.</p>
<p>Understanding "vararg functions" is <em>not</em> essential to creating C programs.
I think I've used it maybe a 20 times in my code in the years I've been
programming.  However, knowing how a vararg function works will help you
debug the ones you use and gives you more understanding of the computer.</p>
<div class="highlight"><pre><a name="code--ex25.c-pyg.html-1"></a><span class="cm">/** WARNING: This code is fresh and potentially isn't correct yet. */</span>
<a name="code--ex25.c-pyg.html-2"></a>
<a name="code--ex25.c-pyg.html-3"></a><span class="cp">#include &lt;stdlib.h&gt;</span>
<a name="code--ex25.c-pyg.html-4"></a><span class="cp">#include &lt;stdio.h&gt;</span>
<a name="code--ex25.c-pyg.html-5"></a><span class="cp">#include &lt;stdarg.h&gt;</span>
<a name="code--ex25.c-pyg.html-6"></a><span class="cp">#include "dbg.h"</span>
<a name="code--ex25.c-pyg.html-7"></a>
<a name="code--ex25.c-pyg.html-8"></a><span class="cp">#define MAX_DATA 100</span>
<a name="code--ex25.c-pyg.html-9"></a>
<a name="code--ex25.c-pyg.html-10"></a><span class="kt">int</span> <span class="nf">read_string</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">out_string</span><span class="p">,</span> <span class="kt">int</span> <span class="n">max_buffer</span><span class="p">)</span>
<a name="code--ex25.c-pyg.html-11"></a><span class="p">{</span>
<a name="code--ex25.c-pyg.html-12"></a>    <span class="o">*</span><span class="n">out_string</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">max_buffer</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-13"></a>    <span class="n">check_mem</span><span class="p">(</span><span class="o">*</span><span class="n">out_string</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-14"></a>
<a name="code--ex25.c-pyg.html-15"></a>    <span class="kt">char</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="n">fgets</span><span class="p">(</span><span class="o">*</span><span class="n">out_string</span><span class="p">,</span> <span class="n">max_buffer</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-16"></a>    <span class="n">check</span><span class="p">(</span><span class="n">result</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">,</span> <span class="s">"Input error."</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-17"></a>
<a name="code--ex25.c-pyg.html-18"></a>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-19"></a>
<a name="code--ex25.c-pyg.html-20"></a><span class="nl">error:</span>
<a name="code--ex25.c-pyg.html-21"></a>    <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">out_string</span><span class="p">)</span> <span class="n">free</span><span class="p">(</span><span class="o">*</span><span class="n">out_string</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-22"></a>    <span class="o">*</span><span class="n">out_string</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-23"></a>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-24"></a><span class="p">}</span>
<a name="code--ex25.c-pyg.html-25"></a>
<a name="code--ex25.c-pyg.html-26"></a><span class="kt">int</span> <span class="nf">read_int</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">out_int</span><span class="p">)</span>
<a name="code--ex25.c-pyg.html-27"></a><span class="p">{</span>
<a name="code--ex25.c-pyg.html-28"></a>    <span class="kt">char</span> <span class="o">*</span><span class="n">input</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-29"></a>    <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">read_string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">input</span><span class="p">,</span> <span class="n">MAX_DATA</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-30"></a>    <span class="n">check</span><span class="p">(</span><span class="n">rc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="s">"Failed to read number."</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-31"></a>
<a name="code--ex25.c-pyg.html-32"></a>    <span class="o">*</span><span class="n">out_int</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-33"></a>
<a name="code--ex25.c-pyg.html-34"></a>    <span class="n">free</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-35"></a>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-36"></a>
<a name="code--ex25.c-pyg.html-37"></a><span class="nl">error:</span>
<a name="code--ex25.c-pyg.html-38"></a>    <span class="k">if</span><span class="p">(</span><span class="n">input</span><span class="p">)</span> <span class="n">free</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-39"></a>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-40"></a><span class="p">}</span>
<a name="code--ex25.c-pyg.html-41"></a>
<a name="code--ex25.c-pyg.html-42"></a><span class="kt">int</span> <span class="nf">read_scan</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fmt</span><span class="p">,</span> <span class="p">...)</span>
<a name="code--ex25.c-pyg.html-43"></a><span class="p">{</span>
<a name="code--ex25.c-pyg.html-44"></a>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-45"></a>    <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-46"></a>    <span class="kt">int</span> <span class="o">*</span><span class="n">out_int</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-47"></a>    <span class="kt">char</span> <span class="o">*</span><span class="n">out_char</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-48"></a>    <span class="kt">char</span> <span class="o">**</span><span class="n">out_string</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-49"></a>    <span class="kt">int</span> <span class="n">max_buffer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-50"></a>
<a name="code--ex25.c-pyg.html-51"></a>    <span class="kt">va_list</span> <span class="n">argp</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-52"></a>    <span class="n">va_start</span><span class="p">(</span><span class="n">argp</span><span class="p">,</span> <span class="n">fmt</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-53"></a>
<a name="code--ex25.c-pyg.html-54"></a>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">fmt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'\0'</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
<a name="code--ex25.c-pyg.html-55"></a>        <span class="k">if</span><span class="p">(</span><span class="n">fmt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'%'</span><span class="p">)</span> <span class="p">{</span>
<a name="code--ex25.c-pyg.html-56"></a>            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-57"></a>            <span class="k">switch</span><span class="p">(</span><span class="n">fmt</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
<a name="code--ex25.c-pyg.html-58"></a>                <span class="k">case</span> <span class="sc">'\0'</span>:
<a name="code--ex25.c-pyg.html-59"></a>                    <span class="n">sentinel</span><span class="p">(</span><span class="s">"Invalid format, you ended with %%."</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-60"></a>                    <span class="k">break</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-61"></a>
<a name="code--ex25.c-pyg.html-62"></a>                <span class="k">case</span> <span class="sc">'d'</span>:
<a name="code--ex25.c-pyg.html-63"></a>                    <span class="n">out_int</span> <span class="o">=</span> <span class="n">va_arg</span><span class="p">(</span><span class="n">argp</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-64"></a>                    <span class="n">rc</span> <span class="o">=</span> <span class="n">read_int</span><span class="p">(</span><span class="n">out_int</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-65"></a>                    <span class="n">check</span><span class="p">(</span><span class="n">rc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="s">"Failed to read int."</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-66"></a>                    <span class="k">break</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-67"></a>
<a name="code--ex25.c-pyg.html-68"></a>                <span class="k">case</span> <span class="sc">'c'</span>:
<a name="code--ex25.c-pyg.html-69"></a>                    <span class="n">out_char</span> <span class="o">=</span> <span class="n">va_arg</span><span class="p">(</span><span class="n">argp</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-70"></a>                    <span class="o">*</span><span class="n">out_char</span> <span class="o">=</span> <span class="n">fgetc</span><span class="p">(</span><span class="n">stdin</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-71"></a>                    <span class="k">break</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-72"></a>
<a name="code--ex25.c-pyg.html-73"></a>                <span class="k">case</span> <span class="sc">'s'</span>:
<a name="code--ex25.c-pyg.html-74"></a>                    <span class="n">max_buffer</span> <span class="o">=</span> <span class="n">va_arg</span><span class="p">(</span><span class="n">argp</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-75"></a>                    <span class="n">out_string</span> <span class="o">=</span> <span class="n">va_arg</span><span class="p">(</span><span class="n">argp</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-76"></a>                    <span class="n">rc</span> <span class="o">=</span> <span class="n">read_string</span><span class="p">(</span><span class="n">out_string</span><span class="p">,</span> <span class="n">max_buffer</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-77"></a>                    <span class="n">check</span><span class="p">(</span><span class="n">rc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="s">"Failed to read string."</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-78"></a>                    <span class="k">break</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-79"></a>
<a name="code--ex25.c-pyg.html-80"></a>                <span class="nl">default:</span>
<a name="code--ex25.c-pyg.html-81"></a>                    <span class="n">sentinel</span><span class="p">(</span><span class="s">"Invalid format."</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-82"></a>            <span class="p">}</span>
<a name="code--ex25.c-pyg.html-83"></a>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
<a name="code--ex25.c-pyg.html-84"></a>            <span class="n">fgetc</span><span class="p">(</span><span class="n">stdin</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-85"></a>        <span class="p">}</span>
<a name="code--ex25.c-pyg.html-86"></a>
<a name="code--ex25.c-pyg.html-87"></a>        <span class="n">check</span><span class="p">(</span><span class="o">!</span><span class="n">feof</span><span class="p">(</span><span class="n">stdin</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">ferror</span><span class="p">(</span><span class="n">stdin</span><span class="p">),</span> <span class="s">"Input error."</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-88"></a>    <span class="p">}</span>
<a name="code--ex25.c-pyg.html-89"></a>
<a name="code--ex25.c-pyg.html-90"></a>    <span class="n">va_end</span><span class="p">(</span><span class="n">argp</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-91"></a>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-92"></a>
<a name="code--ex25.c-pyg.html-93"></a><span class="nl">error:</span>
<a name="code--ex25.c-pyg.html-94"></a>    <span class="n">va_end</span><span class="p">(</span><span class="n">argp</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-95"></a>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-96"></a><span class="p">}</span>
<a name="code--ex25.c-pyg.html-97"></a>
<a name="code--ex25.c-pyg.html-98"></a>
<a name="code--ex25.c-pyg.html-99"></a>
<a name="code--ex25.c-pyg.html-100"></a><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<a name="code--ex25.c-pyg.html-101"></a><span class="p">{</span>
<a name="code--ex25.c-pyg.html-102"></a>    <span class="kt">char</span> <span class="o">*</span><span class="n">first_name</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-103"></a>    <span class="kt">char</span> <span class="n">initial</span> <span class="o">=</span> <span class="sc">' '</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-104"></a>    <span class="kt">char</span> <span class="o">*</span><span class="n">last_name</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-105"></a>    <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-106"></a>
<a name="code--ex25.c-pyg.html-107"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"What's your first name? "</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-108"></a>    <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">read_scan</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="n">MAX_DATA</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">first_name</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-109"></a>    <span class="n">check</span><span class="p">(</span><span class="n">rc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="s">"Failed first name."</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-110"></a>
<a name="code--ex25.c-pyg.html-111"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"What's your initial? "</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-112"></a>    <span class="n">rc</span> <span class="o">=</span> <span class="n">read_scan</span><span class="p">(</span><span class="s">"%c</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">initial</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-113"></a>    <span class="n">check</span><span class="p">(</span><span class="n">rc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="s">"Failed initial."</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-114"></a>
<a name="code--ex25.c-pyg.html-115"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"What's your last name? "</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-116"></a>    <span class="n">rc</span> <span class="o">=</span> <span class="n">read_scan</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="n">MAX_DATA</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">last_name</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-117"></a>    <span class="n">check</span><span class="p">(</span><span class="n">rc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="s">"Failed last name."</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-118"></a>
<a name="code--ex25.c-pyg.html-119"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"How old are you? "</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-120"></a>    <span class="n">rc</span> <span class="o">=</span> <span class="n">read_scan</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">age</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-121"></a>
<a name="code--ex25.c-pyg.html-122"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"---- RESULTS ----</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-123"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"First Name: %s"</span><span class="p">,</span> <span class="n">first_name</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-124"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"Initial: '%c'</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">initial</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-125"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"Last Name: %s"</span><span class="p">,</span> <span class="n">last_name</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-126"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"Age: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">age</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-127"></a>
<a name="code--ex25.c-pyg.html-128"></a>    <span class="n">free</span><span class="p">(</span><span class="n">first_name</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-129"></a>    <span class="n">free</span><span class="p">(</span><span class="n">last_name</span><span class="p">);</span>
<a name="code--ex25.c-pyg.html-130"></a>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-131"></a><span class="nl">error:</span>
<a name="code--ex25.c-pyg.html-132"></a>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<a name="code--ex25.c-pyg.html-133"></a><span class="p">}</span>
</pre></div><p>This program is similar to the previous exercise, except I have written
my own <tt class="docutils literal">scanf</tt> style function that handles strings the way I want.
The main function should be clear to you, as well as the two functions
<tt class="docutils literal">read_string</tt> and <tt class="docutils literal">read_int</tt> since they do nothing new.</p>
<p>The varargs function is called <tt class="docutils literal">read_scan</tt> and it does the same
thing that <tt class="docutils literal">scanf</tt> is doing using the <tt class="docutils literal">va_list</tt> data
structure and it's supporting macros and functions.  Here's how it works:</p>
<ul class="simple">
<li>I set as the last parameter of the function the keyword <tt class="docutils literal">...</tt>
which indicates to C that this function will take any number of arguments
after the <tt class="docutils literal">fmt</tt> argument.  I could put many other arguments before
this, but I can't put anymore after this.</li>
<li>After setting up some variables, I create a <tt class="docutils literal">va_list</tt> variable
and initialize it with <tt class="docutils literal">va_start</tt>.  This configures the gear
in <tt class="docutils literal">stdarg.h</tt> that handles variable arguments.</li>
<li>I then use a <tt class="docutils literal"><span class="pre">for-loop</span></tt> to loop through the format string
<tt class="docutils literal">fmt</tt> and process the same kind of formats that <tt class="docutils literal">scanf</tt>
has, but much simpler.  I just have integers, characters, and strings.</li>
<li>When I hit a format, I use the <tt class="docutils literal"><span class="pre">switch-statement</span></tt> to figure out
what to do.</li>
<li>Now, to <em>get</em> a variable from the <tt class="docutils literal">va_list argp</tt> I use the
macro <tt class="docutils literal">va_arg(argp, TYPE)</tt> where TYPE is the exact type of what
I will assign this function parameter to.  The downside to this design
is you're flying blind, so if you don't have enough parameters then
oh well, you'll most likely crash.</li>
<li>The interesting difference from <tt class="docutils literal">scanf</tt> is I'm assuming that people
want <tt class="docutils literal">read_scan</tt> to create the strings it reads when it hits a
<tt class="docutils literal">'s'</tt> format sequence.  When you give this sequence, the function
takes two parameters off the <tt class="docutils literal">va_list argp</tt> stack: the max function
size to read, and the output character string pointer.  Using that information
it just runs <tt class="docutils literal">read_string</tt> to do the real work.</li>
<li>This makes <tt class="docutils literal">read_scan</tt> more consistent than <tt class="docutils literal">scanf</tt> since you
<em>always</em> give an address-of <tt class="docutils literal">&amp;</tt> on variables to have them set
appropriately.</li>
<li>Finally, if it encounters a character that's not in the format, it just reads
one char to skip it.  It doesn't care what that char is, just that it should
skip it.</li>
</ul>
<div class="section" id="what-you-should-see">
<h1>What You Should See</h1>
<p>When you run this one it's similar to the last one:</p>
<div class="highlight"><pre><a name="code--ex25.sh-session-pyg.html-1"></a><span class="gp">$</span> make ex25
<a name="code--ex25.sh-session-pyg.html-2"></a><span class="go">cc -Wall -g -DNDEBUG    ex25.c   -o ex25</span>
<a name="code--ex25.sh-session-pyg.html-3"></a><span class="gp">$</span> ./ex25
<a name="code--ex25.sh-session-pyg.html-4"></a><span class="go">What's your first name? Zed</span>
<a name="code--ex25.sh-session-pyg.html-5"></a><span class="go">What's your initial? A</span>
<a name="code--ex25.sh-session-pyg.html-6"></a><span class="go">What's your last name? Shaw</span>
<a name="code--ex25.sh-session-pyg.html-7"></a><span class="go">How old are you? 37</span>
<a name="code--ex25.sh-session-pyg.html-8"></a><span class="go">---- RESULTS ----</span>
<a name="code--ex25.sh-session-pyg.html-9"></a><span class="go">First Name: Zed</span>
<a name="code--ex25.sh-session-pyg.html-10"></a><span class="go">Initial: 'A'</span>
<a name="code--ex25.sh-session-pyg.html-11"></a><span class="go">Last Name: Shaw</span>
<a name="code--ex25.sh-session-pyg.html-12"></a><span class="go">Age: 37</span>
</pre></div></div>
<div class="section" id="how-to-break-it">
<h1>How To Break It</h1>
<p>This program should be more robust against buffer overflows, but it doesn't
handle the formatted input as well as <tt class="docutils literal">scanf</tt>.  To try breaking this,
change the code that you forget to pass in the initial size for '%s' formats.
Try also giving it more data than <tt class="docutils literal">MAX_DATA</tt>, and then see how not
using <tt class="docutils literal">calloc</tt> in <tt class="docutils literal">read_string</tt> changes how it works.  Finally,
there's a problem that fgets eats the newlines, so try to fix that using
<tt class="docutils literal">fgetc</tt> but leave out the <tt class="docutils literal">\0</tt> that ends the string.</p>
</div>
<div class="section" id="extra-credit">
<h1>Extra Credit</h1>
<ul class="simple">
<li>Make double and triple sure that you know what each of the <tt class="docutils literal">out_</tt>
variables are doing.  Most important is <tt class="docutils literal">out_string</tt> and how it's
a pointer to a pointer, so getting when you're setting the pointer vs. the
contents is important.  Break down each of the</li>
<li>Write a similar function to <tt class="docutils literal">printf</tt> that uses the varargs system
and rewrite <tt class="docutils literal">main</tt> to use it.</li>
<li>As usual, read the man page on all of this so you know what it does
on your platform.  Some platforms will use macros and others use
functions, and some have these do nothing.  It all depends on the
compiler and the platform you use.</li>
</ul>
</div>
    </div>

    <div class="one columns" id="right-nav">
        <center>
        <p><a href="http://c.learncodethehardway.org/book/"><img src="Exercise%2025%20%20Variable%20Argument%20Functions_files/48_structure.png"></a></p>
        <p><a href="mailto:help@learncodethehardway.org"><img src="Exercise%2025%20%20Variable%20Argument%20Functions_files/48_email.png"></a></p>
        <p><a href="#faq"><img src="Exercise%2025%20%20Variable%20Argument%20Functions_files/48_faq.png"></a></p>
        <p><a href="http://inculcate.me/school/courses/4/"><img src="Exercise%2025%20%20Variable%20Argument%20Functions_files/48_video.png"></a></p>
        </center>
    </div>
    <div class="twelve columns" id="footer">
        <div class="four columns" id="footer-block">
            <p>
            <a href="http://learncodethehardway.org/">Copyright (C) 2010 Zed. A. Shaw</a>
            </p>
        </div>
        <div class="four columns" id="footer-block">
            <p>
            </p>
        </div>
        <div class="three columns" id="footer-block">
            <p>
            <a href="http://c.learncodethehardway.org/credits.html">Credits</a>
            </p>
        </div>
        <div class="one columns">
            &nbsp;
        </div>
    </div>

  <!-- Included JS Files (Compressed) -->
  <script src="Exercise%2025%20%20Variable%20Argument%20Functions_files/jquery.js"></script>
  <script src="Exercise%2025%20%20Variable%20Argument%20Functions_files/foundation.js"></script>
  
  <!-- Initialize JS Plugins -->
  <script src="Exercise%2025%20%20Variable%20Argument%20Functions_files/app.js"></script>

  <script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-24168052-8']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

  </script>


</div></body></html>