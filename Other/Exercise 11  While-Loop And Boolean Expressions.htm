<!DOCTYPE html>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if gt IE 8]><!-->
<html style="" class=" js no-touch svg inlinesvg svgclippaths no-ie8compat js no-touch svg inlinesvg svgclippaths no-ie8compat" lang="en"><!--<![endif]--><head>
  <meta charset="utf-8">

  <!-- Set the viewport width to device width for mobile -->
  <meta name="viewport" content="width=device-width">

  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="generator" content="Docutils 0.10: http://docutils.sourceforge.net/">
<title>Exercise 11: While-Loop And Boolean Expressions</title>

  <!-- Included CSS Files (Compressed) -->
  <link rel="stylesheet" href="Exercise%2011%20%20While-Loop%20And%20Boolean%20Expressions_files/foundation.css">
  <link rel="stylesheet" href="Exercise%2011%20%20While-Loop%20And%20Boolean%20Expressions_files/pygments.css">
  <link rel="stylesheet" href="Exercise%2011%20%20While-Loop%20And%20Boolean%20Expressions_files/app.css">

  <script src="Exercise%2011%20%20While-Loop%20And%20Boolean%20Expressions_files/ga.js" async="" type="text/javascript"></script><script src="Exercise%2011%20%20While-Loop%20And%20Boolean%20Expressions_files/modernizr.js"></script>

  <!-- IE Fix for HTML5 Tags -->
  <!--[if lt IE 9]>
    <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->

</head>
<body>

  <div class="row">
      <div class="twelve columns" id="header">
          <div class="topbar">
              <div class="global-nav">
                  <div class="four columns" id="header-block">
                      <p><a href="http://c.learncodethehardway.org/">Learn C The Hard Way</a></p>
                  </div>
                  <div class="four columns" id="header-block">
                      <p style="color: white"><a href="http://inculcate.me/school/courses/4/">Online Video Course Plus PDFs $29</a></p>
                  </div>
                  <div class="four columns" id="header-block">
                      <p>
                      <a href="http://learnpythonthehardway.org/">Python</a> |
                      <a href="http://ruby.learncodethehardway.org/">Ruby</a> |
                      <a href="http://c.learncodethehardway.org/">C</a> |
                      <a href="http://sql.learncodethehardway.org/">SQL</a> |
                      <a href="http://regex.learncodethehardway.org/">Regex</a> 
                      </p>
                  </div>
              </div>
          </div>
          <h1 class="title">Exercise 11: While-Loop And Boolean Expressions</h1>
      </div>
  </div>

  <div class="row">
    <div class="eleven columns">
        <p>You've had your first taste of how C does loops, but the boolean
expression <tt class="docutils literal">i &lt; argc</tt> might have not been clear to you.  Let me
explain something about it before we see how a <tt class="docutils literal"><span class="pre">while-loop</span></tt>
works.</p>
<p>In C, there's not really a "boolean" type, and instead any integer
that's 0 is "false" and otherwise it's "true".  In the last exercise
the expression <tt class="docutils literal">i &lt; argc</tt> actually resulted in 1 or 0, not
an explicit <tt class="docutils literal">True</tt> or <tt class="docutils literal">False</tt> like in Python.  This is
another example of C being closer to how a computer works, because
to a computer truth values are just integers.</p>
<p>Now you'll take and implement the same program from the last exercise
but use a <tt class="docutils literal"><span class="pre">while-loop</span></tt> instead.  This will let you compare the
two so you can see how one is related to another.</p>
<div class="highlight"><pre><a name="code--ex11.c-pyg.html-1"></a><span class="cp">#include &lt;stdio.h&gt;</span>
<a name="code--ex11.c-pyg.html-2"></a>
<a name="code--ex11.c-pyg.html-3"></a><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<a name="code--ex11.c-pyg.html-4"></a><span class="p">{</span>
<a name="code--ex11.c-pyg.html-5"></a>    <span class="c1">// go through each string in argv</span>
<a name="code--ex11.c-pyg.html-6"></a>
<a name="code--ex11.c-pyg.html-7"></a>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<a name="code--ex11.c-pyg.html-8"></a>    <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">argc</span><span class="p">)</span> <span class="p">{</span>
<a name="code--ex11.c-pyg.html-9"></a>        <span class="n">printf</span><span class="p">(</span><span class="s">"arg %d: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
<a name="code--ex11.c-pyg.html-10"></a>        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
<a name="code--ex11.c-pyg.html-11"></a>    <span class="p">}</span>
<a name="code--ex11.c-pyg.html-12"></a>
<a name="code--ex11.c-pyg.html-13"></a>    <span class="c1">// let's make our own array of strings</span>
<a name="code--ex11.c-pyg.html-14"></a>    <span class="kt">char</span> <span class="o">*</span><span class="n">states</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
<a name="code--ex11.c-pyg.html-15"></a>        <span class="s">"California"</span><span class="p">,</span> <span class="s">"Oregon"</span><span class="p">,</span>
<a name="code--ex11.c-pyg.html-16"></a>        <span class="s">"Washington"</span><span class="p">,</span> <span class="s">"Texas"</span>
<a name="code--ex11.c-pyg.html-17"></a>    <span class="p">};</span>
<a name="code--ex11.c-pyg.html-18"></a>
<a name="code--ex11.c-pyg.html-19"></a>    <span class="kt">int</span> <span class="n">num_states</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
<a name="code--ex11.c-pyg.html-20"></a>    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">// watch for this</span>
<a name="code--ex11.c-pyg.html-21"></a>    <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_states</span><span class="p">)</span> <span class="p">{</span>
<a name="code--ex11.c-pyg.html-22"></a>        <span class="n">printf</span><span class="p">(</span><span class="s">"state %d: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">states</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
<a name="code--ex11.c-pyg.html-23"></a>        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
<a name="code--ex11.c-pyg.html-24"></a>    <span class="p">}</span>
<a name="code--ex11.c-pyg.html-25"></a>
<a name="code--ex11.c-pyg.html-26"></a>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<a name="code--ex11.c-pyg.html-27"></a><span class="p">}</span>
</pre></div><p>You can see from this that a <tt class="docutils literal"><span class="pre">while-loop</span></tt> is simpler:</p>
<pre class="literal-block">while(TEST) {
    CODE;
}
</pre>
<p>It simply runs the <tt class="docutils literal">CODE</tt> as long as <tt class="docutils literal">TEST</tt> is true (1).
This means that to replicate how the <tt class="docutils literal"><span class="pre">for-loop</span></tt> works we need to
do our own initializing and incrementing of <tt class="docutils literal">i</tt>.</p>
<div class="section" id="what-you-should-see">
<h1>What You Should See</h1>
<p>The output is basically the same, so I just did it a little different
so you can see another way it runs.</p>
<div class="highlight"><pre><a name="code--ex11.sh-session-pyg.html-1"></a><span class="gp">$</span> make ex11
<a name="code--ex11.sh-session-pyg.html-2"></a><span class="go">cc -Wall -g    ex11.c   -o ex11</span>
<a name="code--ex11.sh-session-pyg.html-3"></a><span class="gp">$</span> ./ex11
<a name="code--ex11.sh-session-pyg.html-4"></a><span class="go">arg 0: ./ex11</span>
<a name="code--ex11.sh-session-pyg.html-5"></a><span class="go">state 0: California</span>
<a name="code--ex11.sh-session-pyg.html-6"></a><span class="go">state 1: Oregon</span>
<a name="code--ex11.sh-session-pyg.html-7"></a><span class="go">state 2: Washington</span>
<a name="code--ex11.sh-session-pyg.html-8"></a><span class="go">state 3: Texas</span>
<a name="code--ex11.sh-session-pyg.html-9"></a><span class="gp">$</span>
<a name="code--ex11.sh-session-pyg.html-10"></a><span class="gp">$</span> ./ex11 <span class="nb">test </span>it
<a name="code--ex11.sh-session-pyg.html-11"></a><span class="go">arg 0: ./ex11</span>
<a name="code--ex11.sh-session-pyg.html-12"></a><span class="go">arg 1: test</span>
<a name="code--ex11.sh-session-pyg.html-13"></a><span class="go">arg 2: it</span>
<a name="code--ex11.sh-session-pyg.html-14"></a><span class="go">state 0: California</span>
<a name="code--ex11.sh-session-pyg.html-15"></a><span class="go">state 1: Oregon</span>
<a name="code--ex11.sh-session-pyg.html-16"></a><span class="go">state 2: Washington</span>
<a name="code--ex11.sh-session-pyg.html-17"></a><span class="go">state 3: Texas</span>
<a name="code--ex11.sh-session-pyg.html-18"></a><span class="gp">$</span>
</pre></div></div>
<div class="section" id="how-to-break-it">
<h1>How To Break It</h1>
<p>In your own code you should favor <tt class="docutils literal"><span class="pre">for-loop</span></tt> constructs over
<tt class="docutils literal"><span class="pre">while-loop</span></tt> because a <tt class="docutils literal"><span class="pre">for-loop</span></tt> is harder to break.  Here's a few
common ways:</p>
<ul class="simple">
<li>Forget to initialize the first <tt class="docutils literal">int i;</tt> so have it
loop wrong.</li>
<li>Forget to initialize the second loop's <tt class="docutils literal">i</tt> so that it
retains the value from the end of the first loop.  Now your
second loop might or might not run.</li>
<li>Forget to do a <tt class="docutils literal">i++</tt> increment at the end of the loop
and you get a "forever loop", one of the dreaded problems
of the first decade or two of programming.</li>
</ul>
</div>
<div class="section" id="extra-credit">
<h1>Extra Credit</h1>
<ul class="simple">
<li>Make these loops count backward by using <tt class="docutils literal"><span class="pre">i--</span></tt> to start
at <tt class="docutils literal">argc</tt> and count down to 0.  You may have to do some
math to make the array indexes work right.</li>
<li>Use a while loop to <em>copy</em> the values from <tt class="docutils literal">argv</tt>
into <tt class="docutils literal">states</tt>.</li>
<li>Make this copy loop never fail such that if there's too many
<tt class="docutils literal">argv</tt> elements it won't put them all into <tt class="docutils literal">states</tt>.</li>
<li>Research if you've really copied these strings.  The answer may
surprise and confuse you though.</li>
</ul>
</div>
    </div>

    <div class="one columns" id="right-nav">
        <center>
        <p><a href="http://c.learncodethehardway.org/book/"><img src="Exercise%2011%20%20While-Loop%20And%20Boolean%20Expressions_files/48_structure.png"></a></p>
        <p><a href="mailto:help@learncodethehardway.org"><img src="Exercise%2011%20%20While-Loop%20And%20Boolean%20Expressions_files/48_email.png"></a></p>
        <p><a href="#faq"><img src="Exercise%2011%20%20While-Loop%20And%20Boolean%20Expressions_files/48_faq.png"></a></p>
        <p><a href="http://inculcate.me/school/courses/4/"><img src="Exercise%2011%20%20While-Loop%20And%20Boolean%20Expressions_files/48_video.png"></a></p>
        </center>
    </div>
    <div class="twelve columns" id="footer">
        <div class="four columns" id="footer-block">
            <p>
            <a href="http://learncodethehardway.org/">Copyright (C) 2010 Zed. A. Shaw</a>
            </p>
        </div>
        <div class="four columns" id="footer-block">
            <p>
            </p>
        </div>
        <div class="three columns" id="footer-block">
            <p>
            <a href="http://c.learncodethehardway.org/credits.html">Credits</a>
            </p>
        </div>
        <div class="one columns">
            &nbsp;
        </div>
    </div>

  <!-- Included JS Files (Compressed) -->
  <script src="Exercise%2011%20%20While-Loop%20And%20Boolean%20Expressions_files/jquery.js"></script>
  <script src="Exercise%2011%20%20While-Loop%20And%20Boolean%20Expressions_files/foundation.js"></script>
  
  <!-- Initialize JS Plugins -->
  <script src="Exercise%2011%20%20While-Loop%20And%20Boolean%20Expressions_files/app.js"></script>

  <script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-24168052-8']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

  </script>


</div></body></html>