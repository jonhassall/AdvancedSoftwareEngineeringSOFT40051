<!DOCTYPE html>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if gt IE 8]><!-->
<html style="" class=" js no-touch svg inlinesvg svgclippaths no-ie8compat js no-touch svg inlinesvg svgclippaths no-ie8compat" lang="en"><!--<![endif]--><head>
  <meta charset="utf-8">

  <!-- Set the viewport width to device width for mobile -->
  <meta name="viewport" content="width=device-width">

  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="generator" content="Docutils 0.10: http://docutils.sourceforge.net/">
<title>Exercise 9: Arrays And Strings</title>

  <!-- Included CSS Files (Compressed) -->
  <link rel="stylesheet" href="Exercise%209%20%20Arrays%20And%20Strings_files/foundation.css">
  <link rel="stylesheet" href="Exercise%209%20%20Arrays%20And%20Strings_files/pygments.css">
  <link rel="stylesheet" href="Exercise%209%20%20Arrays%20And%20Strings_files/app.css">

  <script src="Exercise%209%20%20Arrays%20And%20Strings_files/ga.js" async="" type="text/javascript"></script><script src="Exercise%209%20%20Arrays%20And%20Strings_files/modernizr.js"></script>

  <!-- IE Fix for HTML5 Tags -->
  <!--[if lt IE 9]>
    <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->

</head>
<body>

  <div class="row">
      <div class="twelve columns" id="header">
          <div class="topbar">
              <div class="global-nav">
                  <div class="four columns" id="header-block">
                      <p><a href="http://c.learncodethehardway.org/">Learn C The Hard Way</a></p>
                  </div>
                  <div class="four columns" id="header-block">
                      <p style="color: white"><a href="http://inculcate.me/school/courses/4/">Online Video Course Plus PDFs $29</a></p>
                  </div>
                  <div class="four columns" id="header-block">
                      <p>
                      <a href="http://learnpythonthehardway.org/">Python</a> |
                      <a href="http://ruby.learncodethehardway.org/">Ruby</a> |
                      <a href="http://c.learncodethehardway.org/">C</a> |
                      <a href="http://sql.learncodethehardway.org/">SQL</a> |
                      <a href="http://regex.learncodethehardway.org/">Regex</a> 
                      </p>
                  </div>
              </div>
          </div>
          <h1 class="title">Exercise 9: Arrays And Strings</h1>
      </div>
  </div>

  <div class="row">
    <div class="eleven columns">
        <p>In the last exercise you went through an introduction to creating basic arrays
and how they map to strings.  In this exercise we'll more completely show the
similarity between arrays and strings, and get into more about memory layouts.</p>
<p>This exercise shows you that C stores its strings simply as an array of bytes,
terminated with the <tt class="docutils literal">'\0'</tt> (nul) byte.  You probably clued into this in the
last exercise since we did it manually.  Here's how we do it in another way to
make it even more clear by comparing it to an array of numbers:</p>
<div class="highlight"><pre><a name="code--ex9.c-pyg.html-1"></a><span class="cp">#include &lt;stdio.h&gt;</span>
<a name="code--ex9.c-pyg.html-2"></a>
<a name="code--ex9.c-pyg.html-3"></a><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<a name="code--ex9.c-pyg.html-4"></a><span class="p">{</span>
<a name="code--ex9.c-pyg.html-5"></a>    <span class="kt">int</span> <span class="n">numbers</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<a name="code--ex9.c-pyg.html-6"></a>    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sc">'a'</span><span class="p">};</span>
<a name="code--ex9.c-pyg.html-7"></a>
<a name="code--ex9.c-pyg.html-8"></a>    <span class="c1">// first, print them out raw</span>
<a name="code--ex9.c-pyg.html-9"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"numbers: %d %d %d %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span>
<a name="code--ex9.c-pyg.html-10"></a>            <span class="n">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">numbers</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
<a name="code--ex9.c-pyg.html-11"></a>            <span class="n">numbers</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">numbers</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
<a name="code--ex9.c-pyg.html-12"></a>
<a name="code--ex9.c-pyg.html-13"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"name each: %c %c %c %c</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span>
<a name="code--ex9.c-pyg.html-14"></a>            <span class="n">name</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">name</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
<a name="code--ex9.c-pyg.html-15"></a>            <span class="n">name</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">name</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
<a name="code--ex9.c-pyg.html-16"></a>
<a name="code--ex9.c-pyg.html-17"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"name: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
<a name="code--ex9.c-pyg.html-18"></a>
<a name="code--ex9.c-pyg.html-19"></a>    <span class="c1">// setup the numbers</span>
<a name="code--ex9.c-pyg.html-20"></a>    <span class="n">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<a name="code--ex9.c-pyg.html-21"></a>    <span class="n">numbers</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<a name="code--ex9.c-pyg.html-22"></a>    <span class="n">numbers</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<a name="code--ex9.c-pyg.html-23"></a>    <span class="n">numbers</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
<a name="code--ex9.c-pyg.html-24"></a>
<a name="code--ex9.c-pyg.html-25"></a>    <span class="c1">// setup the name</span>
<a name="code--ex9.c-pyg.html-26"></a>    <span class="n">name</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'Z'</span><span class="p">;</span>
<a name="code--ex9.c-pyg.html-27"></a>    <span class="n">name</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'e'</span><span class="p">;</span>
<a name="code--ex9.c-pyg.html-28"></a>    <span class="n">name</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'d'</span><span class="p">;</span>
<a name="code--ex9.c-pyg.html-29"></a>    <span class="n">name</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
<a name="code--ex9.c-pyg.html-30"></a>
<a name="code--ex9.c-pyg.html-31"></a>    <span class="c1">// then print them out initialized</span>
<a name="code--ex9.c-pyg.html-32"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"numbers: %d %d %d %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span>
<a name="code--ex9.c-pyg.html-33"></a>            <span class="n">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">numbers</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
<a name="code--ex9.c-pyg.html-34"></a>            <span class="n">numbers</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">numbers</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
<a name="code--ex9.c-pyg.html-35"></a>
<a name="code--ex9.c-pyg.html-36"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"name each: %c %c %c %c</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span>
<a name="code--ex9.c-pyg.html-37"></a>            <span class="n">name</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">name</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
<a name="code--ex9.c-pyg.html-38"></a>            <span class="n">name</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">name</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
<a name="code--ex9.c-pyg.html-39"></a>
<a name="code--ex9.c-pyg.html-40"></a>    <span class="c1">// print the name like a string</span>
<a name="code--ex9.c-pyg.html-41"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"name: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
<a name="code--ex9.c-pyg.html-42"></a>
<a name="code--ex9.c-pyg.html-43"></a>    <span class="c1">// another way to use name</span>
<a name="code--ex9.c-pyg.html-44"></a>    <span class="kt">char</span> <span class="o">*</span><span class="n">another</span> <span class="o">=</span> <span class="s">"Zed"</span><span class="p">;</span>
<a name="code--ex9.c-pyg.html-45"></a>
<a name="code--ex9.c-pyg.html-46"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"another: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">another</span><span class="p">);</span>
<a name="code--ex9.c-pyg.html-47"></a>
<a name="code--ex9.c-pyg.html-48"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"another each: %c %c %c %c</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span>
<a name="code--ex9.c-pyg.html-49"></a>            <span class="n">another</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">another</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
<a name="code--ex9.c-pyg.html-50"></a>            <span class="n">another</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">another</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
<a name="code--ex9.c-pyg.html-51"></a>
<a name="code--ex9.c-pyg.html-52"></a>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<a name="code--ex9.c-pyg.html-53"></a><span class="p">}</span>
</pre></div><p>In this code, we setup some arrays the tedious way, by assigning a value to
each element.  In <tt class="docutils literal">numbers</tt> we are setting up numbers, but in <tt class="docutils literal">name</tt> we're
actually building a string manually.</p>
<div class="section" id="what-you-should-see">
<h1>What You Should See</h1>
<p>When you run this code you should see first the arrays printed with their
contents initialized to zero, then in its initialized form:</p>
<div class="highlight"><pre><a name="code--ex9.sh-session-pyg.html-1"></a><span class="gp">$</span> make ex9
<a name="code--ex9.sh-session-pyg.html-2"></a><span class="go">cc -Wall -g    ex9.c   -o ex9</span>
<a name="code--ex9.sh-session-pyg.html-3"></a><span class="gp">$</span> ./ex9
<a name="code--ex9.sh-session-pyg.html-4"></a><span class="go">numbers: 0 0 0 0</span>
<a name="code--ex9.sh-session-pyg.html-5"></a><span class="go">name each: a   </span>
<a name="code--ex9.sh-session-pyg.html-6"></a><span class="go">name: a</span>
<a name="code--ex9.sh-session-pyg.html-7"></a><span class="go">numbers: 1 2 3 4</span>
<a name="code--ex9.sh-session-pyg.html-8"></a><span class="go">name each: Z e d </span>
<a name="code--ex9.sh-session-pyg.html-9"></a><span class="go">name: Zed</span>
<a name="code--ex9.sh-session-pyg.html-10"></a><span class="go">another: Zed</span>
<a name="code--ex9.sh-session-pyg.html-11"></a><span class="go">another each: Z e d</span>
<a name="code--ex9.sh-session-pyg.html-12"></a><span class="gp">$</span>
</pre></div><p>You'll notice some interesting things about this program:</p>
<ul class="simple">
<li>I didn't have to give all 4 elements of the arrays to initialize them.
This is a short-cut that C has where, if you set just one element, it'll
fill the rest in with 0.</li>
<li>When each element of <tt class="docutils literal">numbers</tt> is printed they all come out as
0.</li>
<li>When each element of <tt class="docutils literal">name</tt> is printed, only the first element 'a'
shows up because the <tt class="docutils literal">'\0'</tt> character is special and won't display.</li>
<li>Then the first time we print <tt class="docutils literal">name</tt> it only prints "a" because,
since the array will be filled with 0 after the first 'a' in the
initializer, then the string is correctly terminated by a <tt class="docutils literal">'\0'</tt>
character.</li>
<li>We then setup the arrays with a tedious manual assignment to each thing
and print them out again.  Look at how they changed.  Now the numbers
are set, but see how the <tt class="docutils literal">name</tt> string prints my name correctly?</li>
<li>There's also two syntaxes for doing a string:
<tt class="docutils literal">char name[4] = {'a'}</tt> on line 6
vs. <tt class="docutils literal">char *another = "name"</tt> on line 44.  The first
one is less common and the second is what you should use
for string literals like this.</li>
</ul>
<p>Notice that I'm using the same syntax and style of code to interact with both
an array of integers and an array of characters, but that <tt class="docutils literal">printf</tt> thinks
that the <tt class="docutils literal">name</tt> is just a string.  Again, this is because to the C language
there's no difference between a string and an array of characters.</p>
<p>Finally, when you make string literals you should usually use the <tt class="docutils literal">char
*another = "Literal"</tt> syntax.  This works out to be the same thing, but it's
more idiomatic and easier to write.</p>
</div>
<div class="section" id="how-to-break-it">
<h1>How To Break It</h1>
<p>The source of almost all bugs in C come from forgetting to have enough space,
or forgetting to put a <tt class="docutils literal">'\0'</tt> at the end of a string.  In fact it's so common
and hard to get right that the majority of good C code just doesn't use C style
strings.  In later exercises we'll actually learn how to avoid C strings
completely.</p>
<p>In this program the key to breaking it is to forget to put the <tt class="docutils literal">'\0'</tt>
character at the end of the strings.  There's a few ways to do this:</p>
<ul class="simple">
<li>Get rid of the initializers that setup <tt class="docutils literal">name</tt>.</li>
<li>Accidentally set <tt class="docutils literal">name[3] = 'A';</tt> so that there's no terminator.</li>
<li>Set the initializer to <tt class="docutils literal"><span class="pre">{'a','a','a','a'}</span></tt> so there's too many
'a' characters and no space for the <tt class="docutils literal">'\0'</tt> terminator.</li>
</ul>
<p>Try to come up with some other ways to break this, and as usual run all of
these under Valgrind so you can see exactly what is going on and what the
errors are called.  Sometimes you'll make these mistakes and even Valgrind
can't find them, but try moving where you declare the variables to see if you
get the error.  This is part of the voodoo of C, that sometimes just where the
variable is located changes the bug.</p>
</div>
<div class="section" id="extra-credit">
<h1>Extra Credit</h1>
<ul class="simple">
<li>Assign the characters into <tt class="docutils literal">numbers</tt> and then use <tt class="docutils literal">printf</tt>
to print them a character at a time.  What kind of compiler warnings
did you get?</li>
<li>Do the inverse for <tt class="docutils literal">name</tt>, trying to treat it like an array
of <tt class="docutils literal">int</tt> and print it out one <tt class="docutils literal">int</tt> at a time.  What
does Valgrind think of that?</li>
<li>How many other ways can you print this out?</li>
<li>If an array of characters is 4 bytes long, and an integer is 4 bytes
long, then can you treat the whole <tt class="docutils literal">name</tt> array like it's just
an integer?  How might you accomplish this crazy hack?</li>
<li>Take out a piece of paper and draw out each of these arrays as a
row of boxes. Then do the operations you just did on paper to see
if you get them right.</li>
<li>Convert <tt class="docutils literal">name</tt> to be in the style of <tt class="docutils literal">another</tt> and see
if the code keeps working.</li>
</ul>
</div>
    </div>

    <div class="one columns" id="right-nav">
        <center>
        <p><a href="http://c.learncodethehardway.org/book/"><img src="Exercise%209%20%20Arrays%20And%20Strings_files/48_structure.png"></a></p>
        <p><a href="mailto:help@learncodethehardway.org"><img src="Exercise%209%20%20Arrays%20And%20Strings_files/48_email.png"></a></p>
        <p><a href="#faq"><img src="Exercise%209%20%20Arrays%20And%20Strings_files/48_faq.png"></a></p>
        <p><a href="http://inculcate.me/school/courses/4/"><img src="Exercise%209%20%20Arrays%20And%20Strings_files/48_video.png"></a></p>
        </center>
    </div>
    <div class="twelve columns" id="footer">
        <div class="four columns" id="footer-block">
            <p>
            <a href="http://learncodethehardway.org/">Copyright (C) 2010 Zed. A. Shaw</a>
            </p>
        </div>
        <div class="four columns" id="footer-block">
            <p>
            </p>
        </div>
        <div class="three columns" id="footer-block">
            <p>
            <a href="http://c.learncodethehardway.org/credits.html">Credits</a>
            </p>
        </div>
        <div class="one columns">
            &nbsp;
        </div>
    </div>

  <!-- Included JS Files (Compressed) -->
  <script src="Exercise%209%20%20Arrays%20And%20Strings_files/jquery.js"></script>
  <script src="Exercise%209%20%20Arrays%20And%20Strings_files/foundation.js"></script>
  
  <!-- Initialize JS Plugins -->
  <script src="Exercise%209%20%20Arrays%20And%20Strings_files/app.js"></script>

  <script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-24168052-8']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

  </script>


</div></body></html>