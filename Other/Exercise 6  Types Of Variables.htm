<!DOCTYPE html>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if gt IE 8]><!-->
<html style="" class=" js no-touch svg inlinesvg svgclippaths no-ie8compat js no-touch svg inlinesvg svgclippaths no-ie8compat" lang="en"><!--<![endif]--><head>
  <meta charset="utf-8">

  <!-- Set the viewport width to device width for mobile -->
  <meta name="viewport" content="width=device-width">

  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="generator" content="Docutils 0.10: http://docutils.sourceforge.net/">
<title>Exercise 6: Types Of Variables</title>

  <!-- Included CSS Files (Compressed) -->
  <link rel="stylesheet" href="Exercise%206%20%20Types%20Of%20Variables_files/foundation.css">
  <link rel="stylesheet" href="Exercise%206%20%20Types%20Of%20Variables_files/pygments.css">
  <link rel="stylesheet" href="Exercise%206%20%20Types%20Of%20Variables_files/app.css">

  <script src="Exercise%206%20%20Types%20Of%20Variables_files/ga.js" async="" type="text/javascript"></script><script src="Exercise%206%20%20Types%20Of%20Variables_files/modernizr.js"></script>

  <!-- IE Fix for HTML5 Tags -->
  <!--[if lt IE 9]>
    <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->

</head>
<body>

  <div class="row">
      <div class="twelve columns" id="header">
          <div class="topbar">
              <div class="global-nav">
                  <div class="four columns" id="header-block">
                      <p><a href="http://c.learncodethehardway.org/">Learn C The Hard Way</a></p>
                  </div>
                  <div class="four columns" id="header-block">
                      <p style="color: white"><a href="http://inculcate.me/school/courses/4/">Online Video Course Plus PDFs $29</a></p>
                  </div>
                  <div class="four columns" id="header-block">
                      <p>
                      <a href="http://learnpythonthehardway.org/">Python</a> |
                      <a href="http://ruby.learncodethehardway.org/">Ruby</a> |
                      <a href="http://c.learncodethehardway.org/">C</a> |
                      <a href="http://sql.learncodethehardway.org/">SQL</a> |
                      <a href="http://regex.learncodethehardway.org/">Regex</a> 
                      </p>
                  </div>
              </div>
          </div>
          <h1 class="title">Exercise 6: Types Of Variables</h1>
      </div>
  </div>

  <div class="row">
    <div class="eleven columns">
        <p>You should be getting a grasp of how a simple C program is structured,
so let's do the next simplest thing which is making some variables
of different types:</p>
<div class="highlight"><pre><a name="code--ex6.c-pyg.html-1"></a><span class="cp">#include &lt;stdio.h&gt;</span>
<a name="code--ex6.c-pyg.html-2"></a>
<a name="code--ex6.c-pyg.html-3"></a><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<a name="code--ex6.c-pyg.html-4"></a><span class="p">{</span>
<a name="code--ex6.c-pyg.html-5"></a>    <span class="kt">int</span> <span class="n">distance</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
<a name="code--ex6.c-pyg.html-6"></a>    <span class="kt">float</span> <span class="n">power</span> <span class="o">=</span> <span class="mf">2.345f</span><span class="p">;</span>
<a name="code--ex6.c-pyg.html-7"></a>    <span class="kt">double</span> <span class="n">super_power</span> <span class="o">=</span> <span class="mf">56789.4532</span><span class="p">;</span>
<a name="code--ex6.c-pyg.html-8"></a>    <span class="kt">char</span> <span class="n">initial</span> <span class="o">=</span> <span class="sc">'A'</span><span class="p">;</span>
<a name="code--ex6.c-pyg.html-9"></a>    <span class="kt">char</span> <span class="n">first_name</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"Zed"</span><span class="p">;</span>
<a name="code--ex6.c-pyg.html-10"></a>    <span class="kt">char</span> <span class="n">last_name</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"Shaw"</span><span class="p">;</span>
<a name="code--ex6.c-pyg.html-11"></a>
<a name="code--ex6.c-pyg.html-12"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"You are %d miles away.</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">distance</span><span class="p">);</span>
<a name="code--ex6.c-pyg.html-13"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"You have %f levels of power.</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">power</span><span class="p">);</span>
<a name="code--ex6.c-pyg.html-14"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"You have %f awesome super powers.</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">super_power</span><span class="p">);</span>
<a name="code--ex6.c-pyg.html-15"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"I have an initial %c.</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">initial</span><span class="p">);</span>
<a name="code--ex6.c-pyg.html-16"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"I have a first name %s.</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">first_name</span><span class="p">);</span>
<a name="code--ex6.c-pyg.html-17"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"I have a last name %s.</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">last_name</span><span class="p">);</span>
<a name="code--ex6.c-pyg.html-18"></a>    <span class="n">printf</span><span class="p">(</span><span class="s">"My whole name is %s %c. %s.</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span>
<a name="code--ex6.c-pyg.html-19"></a>            <span class="n">first_name</span><span class="p">,</span> <span class="n">initial</span><span class="p">,</span> <span class="n">last_name</span><span class="p">);</span>
<a name="code--ex6.c-pyg.html-20"></a>
<a name="code--ex6.c-pyg.html-21"></a>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<a name="code--ex6.c-pyg.html-22"></a><span class="p">}</span>
</pre></div><p>In this program we're declaring variables of different types
and then printing them with different <tt class="docutils literal">printf</tt> format
strings.</p>
<div class="section" id="what-you-should-see">
<h1>What You Should See</h1>
<p>Your output should look like mine, and you can start to see how
the format strings for C are similar to Python and other languages.
They've been around for a long time.</p>
<div class="highlight"><pre><a name="code--ex6.sh-session-pyg.html-1"></a><span class="gp">$</span> make ex6
<a name="code--ex6.sh-session-pyg.html-2"></a><span class="go">cc -Wall -g    ex6.c   -o ex6</span>
<a name="code--ex6.sh-session-pyg.html-3"></a><span class="gp">$</span> ./ex6
<a name="code--ex6.sh-session-pyg.html-4"></a><span class="go">You are 100 miles away.</span>
<a name="code--ex6.sh-session-pyg.html-5"></a><span class="go">You have 2.345000 levels of power.</span>
<a name="code--ex6.sh-session-pyg.html-6"></a><span class="go">You have 56789.453200 awesome super powers.</span>
<a name="code--ex6.sh-session-pyg.html-7"></a><span class="go">I have an initial A.</span>
<a name="code--ex6.sh-session-pyg.html-8"></a><span class="go">I have a first name Zed.</span>
<a name="code--ex6.sh-session-pyg.html-9"></a><span class="go">I have a last name Shaw.</span>
<a name="code--ex6.sh-session-pyg.html-10"></a><span class="go">My whole name is Zed A. Shaw.</span>
<a name="code--ex6.sh-session-pyg.html-11"></a><span class="gp">$</span>
</pre></div><p>What you can see is we have a set of "types", which are ways of
telling the C compiler what each variable should represent, and then
format strings to match different types.  Here's the breakdown
of how they match up:</p>
<dl class="docutils">
<dt>Integers</dt>
<dd>You declare Integers with the <tt class="docutils literal">int</tt> keyword, and
print them with <tt class="docutils literal">%d</tt>.</dd>
<dt>Floating Point</dt>
<dd>Declared with <tt class="docutils literal">float</tt> or <tt class="docutils literal">double</tt> depending
on how big they need to be (double is bigger), and printed with
<tt class="docutils literal">%f</tt>.</dd>
<dt>Character</dt>
<dd>Declared with <tt class="docutils literal">char</tt>, written with a <tt class="docutils literal">'</tt> (single-quote)
character around the char, and then printed with <tt class="docutils literal">%c</tt>.</dd>
<dt>String (Array of Characters)</dt>
<dd>Declared with <tt class="docutils literal">char name[]</tt>,
written with <tt class="docutils literal">"</tt> characters, and printed with <tt class="docutils literal">%s</tt>.</dd>
</dl>
<p>You'll notice that C makes a distinction between single-quote for <tt class="docutils literal">char</tt>
and double-quote for <tt class="docutils literal">char[]</tt> or strings.</p>
<div class="note">
<p class="first admonition-title">Note</p>
<p class="last">When talking about C types, I will typically write in English char[] instead of the whole char SOMENAME[].
This is not valid C code, just a simpler way to talk about types when writing English.</p>
</div>
</div>
<div class="section" id="how-to-break-it">
<h1>How To Break It</h1>
<p>You can easily break this program by passing the wrong thing to the printf
statements.  For example, if you take the line that prints my name, but put the
<tt class="docutils literal">initial</tt> variable before the <tt class="docutils literal">first_name</tt> in the arguments, you'll get a
bug.  Make that change and the compiler will yell at you, then when you run it
you might get a "Segmentation fault" like I did:</p>
<div class="highlight"><pre><a name="code--ex6.bad.sh-session-pyg.html-1"></a><span class="gp">$</span> make ex6
<a name="code--ex6.bad.sh-session-pyg.html-2"></a><span class="go">cc -Wall -g    ex6.c   -o ex6</span>
<a name="code--ex6.bad.sh-session-pyg.html-3"></a><span class="go">ex6.c: In function 'main':</span>
<a name="code--ex6.bad.sh-session-pyg.html-4"></a><span class="go">ex6.c:19: warning: format '%s' expects type 'char *', but argument 2 has type 'int'</span>
<a name="code--ex6.bad.sh-session-pyg.html-5"></a><span class="go">ex6.c:19: warning: format '%c' expects type 'int', but argument 3 has type 'char *'</span>
<a name="code--ex6.bad.sh-session-pyg.html-6"></a><span class="gp">$</span> ./ex6
<a name="code--ex6.bad.sh-session-pyg.html-7"></a><span class="go">You are 100 miles away.</span>
<a name="code--ex6.bad.sh-session-pyg.html-8"></a><span class="go">You have 2.345000 levels of power.</span>
<a name="code--ex6.bad.sh-session-pyg.html-9"></a><span class="go">You have 56789.453125 awesome super powers.</span>
<a name="code--ex6.bad.sh-session-pyg.html-10"></a><span class="go">I have an initial A.</span>
<a name="code--ex6.bad.sh-session-pyg.html-11"></a><span class="go">I have a first name Zed.</span>
<a name="code--ex6.bad.sh-session-pyg.html-12"></a><span class="go">I have a last name Shaw.</span>
<a name="code--ex6.bad.sh-session-pyg.html-13"></a><span class="go">Segmentation fault</span>
<a name="code--ex6.bad.sh-session-pyg.html-14"></a><span class="gp">$</span>
</pre></div><p>Run this change under Valgrind too to see what it tells you about the error
"Invalid read of size 1".</p>
</div>
<div class="section" id="extra-credit">
<h1>Extra Credit</h1>
<ul class="simple">
<li>Come up with other ways to break this C code by changing the
<tt class="docutils literal">printf</tt>, then fix them.</li>
<li>Go search for "printf formats" and try using a few of the
more exotic ones.</li>
<li>Research how many different ways you can write a number. Try
octal, hexadecimal, and others you can find.</li>
<li>Try printing an empty string that's just <tt class="docutils literal">""</tt>.</li>
</ul>
</div>
    </div>

    <div class="one columns" id="right-nav">
        <center>
        <p><a href="http://c.learncodethehardway.org/book/"><img src="Exercise%206%20%20Types%20Of%20Variables_files/48_structure.png"></a></p>
        <p><a href="mailto:help@learncodethehardway.org"><img src="Exercise%206%20%20Types%20Of%20Variables_files/48_email.png"></a></p>
        <p><a href="#faq"><img src="Exercise%206%20%20Types%20Of%20Variables_files/48_faq.png"></a></p>
        <p><a href="http://inculcate.me/school/courses/4/"><img src="Exercise%206%20%20Types%20Of%20Variables_files/48_video.png"></a></p>
        </center>
    </div>
    <div class="twelve columns" id="footer">
        <div class="four columns" id="footer-block">
            <p>
            <a href="http://learncodethehardway.org/">Copyright (C) 2010 Zed. A. Shaw</a>
            </p>
        </div>
        <div class="four columns" id="footer-block">
            <p>
            </p>
        </div>
        <div class="three columns" id="footer-block">
            <p>
            <a href="http://c.learncodethehardway.org/credits.html">Credits</a>
            </p>
        </div>
        <div class="one columns">
            &nbsp;
        </div>
    </div>

  <!-- Included JS Files (Compressed) -->
  <script src="Exercise%206%20%20Types%20Of%20Variables_files/jquery.js"></script>
  <script src="Exercise%206%20%20Types%20Of%20Variables_files/foundation.js"></script>
  
  <!-- Initialize JS Plugins -->
  <script src="Exercise%206%20%20Types%20Of%20Variables_files/app.js"></script>

  <script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-24168052-8']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

  </script>


</div></body></html>