<!DOCTYPE html>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if gt IE 8]><!-->
<html style="" class=" js no-touch svg inlinesvg svgclippaths no-ie8compat js no-touch svg inlinesvg svgclippaths no-ie8compat" lang="en"><!--<![endif]--><head>
  <meta charset="utf-8">

  <!-- Set the viewport width to device width for mobile -->
  <meta name="viewport" content="width=device-width">

  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="generator" content="Docutils 0.10: http://docutils.sourceforge.net/">
<title>Exercise 13: Switch Statement</title>

  <!-- Included CSS Files (Compressed) -->
  <link rel="stylesheet" href="Exercise%2013%20%20Switch%20Statement_files/foundation.css">
  <link rel="stylesheet" href="Exercise%2013%20%20Switch%20Statement_files/pygments.css">
  <link rel="stylesheet" href="Exercise%2013%20%20Switch%20Statement_files/app.css">

  <script src="Exercise%2013%20%20Switch%20Statement_files/ga.js" async="" type="text/javascript"></script><script src="Exercise%2013%20%20Switch%20Statement_files/modernizr.js"></script>

  <!-- IE Fix for HTML5 Tags -->
  <!--[if lt IE 9]>
    <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->

</head>
<body>

  <div class="row">
      <div class="twelve columns" id="header">
          <div class="topbar">
              <div class="global-nav">
                  <div class="four columns" id="header-block">
                      <p><a href="http://c.learncodethehardway.org/">Learn C The Hard Way</a></p>
                  </div>
                  <div class="four columns" id="header-block">
                      <p style="color: white"><a href="http://inculcate.me/school/courses/4/">Online Video Course Plus PDFs $29</a></p>
                  </div>
                  <div class="four columns" id="header-block">
                      <p>
                      <a href="http://learnpythonthehardway.org/">Python</a> |
                      <a href="http://ruby.learncodethehardway.org/">Ruby</a> |
                      <a href="http://c.learncodethehardway.org/">C</a> |
                      <a href="http://sql.learncodethehardway.org/">SQL</a> |
                      <a href="http://regex.learncodethehardway.org/">Regex</a> 
                      </p>
                  </div>
              </div>
          </div>
          <h1 class="title">Exercise 13: Switch Statement</h1>
      </div>
  </div>

  <div class="row">
    <div class="eleven columns">
        <p>In other languages like Ruby you have a <tt class="docutils literal"><span class="pre">switch-statement</span></tt> that can take
any expression.  Some languages like Python just don't have a
<tt class="docutils literal"><span class="pre">switch-statement</span></tt> since an <tt class="docutils literal"><span class="pre">if-statement</span></tt> with boolean expressions
is about the same thing.  For these languages, <tt class="docutils literal"><span class="pre">switch-statements</span></tt> are
more alternatives to <tt class="docutils literal"><span class="pre">if-statements</span></tt> and work the same internally.</p>
<p>The <tt class="docutils literal"><span class="pre">switch-statement</span></tt> is actually entirely different and is really a "jump
table".  Instead of random boolean expressions, you can only put expressions
that result in integers, and these integers are used to calculate jumps from
the top of the <tt class="docutils literal">switch</tt> to the part that matches that value.  Here's some
code that we'll break down to understand this concept of "jump tables":</p>
<div class="highlight"><pre><a name="code--ex13.c-pyg.html-1"></a><span class="cp">#include &lt;stdio.h&gt;</span>
<a name="code--ex13.c-pyg.html-2"></a>
<a name="code--ex13.c-pyg.html-3"></a><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<a name="code--ex13.c-pyg.html-4"></a><span class="p">{</span>
<a name="code--ex13.c-pyg.html-5"></a>    <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
<a name="code--ex13.c-pyg.html-6"></a>        <span class="n">printf</span><span class="p">(</span><span class="s">"ERROR: You need one argument.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<a name="code--ex13.c-pyg.html-7"></a>        <span class="c1">// this is how you abort a program</span>
<a name="code--ex13.c-pyg.html-8"></a>        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<a name="code--ex13.c-pyg.html-9"></a>    <span class="p">}</span>
<a name="code--ex13.c-pyg.html-10"></a>
<a name="code--ex13.c-pyg.html-11"></a>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<a name="code--ex13.c-pyg.html-12"></a>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'\0'</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
<a name="code--ex13.c-pyg.html-13"></a>        <span class="kt">char</span> <span class="n">letter</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
<a name="code--ex13.c-pyg.html-14"></a>
<a name="code--ex13.c-pyg.html-15"></a>        <span class="k">switch</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span> <span class="p">{</span>
<a name="code--ex13.c-pyg.html-16"></a>            <span class="k">case</span> <span class="sc">'a'</span>:
<a name="code--ex13.c-pyg.html-17"></a>            <span class="k">case</span> <span class="sc">'A'</span>:
<a name="code--ex13.c-pyg.html-18"></a>                <span class="n">printf</span><span class="p">(</span><span class="s">"%d: 'A'</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
<a name="code--ex13.c-pyg.html-19"></a>                <span class="k">break</span><span class="p">;</span>
<a name="code--ex13.c-pyg.html-20"></a>
<a name="code--ex13.c-pyg.html-21"></a>            <span class="k">case</span> <span class="sc">'e'</span>:
<a name="code--ex13.c-pyg.html-22"></a>            <span class="k">case</span> <span class="sc">'E'</span>:
<a name="code--ex13.c-pyg.html-23"></a>                <span class="n">printf</span><span class="p">(</span><span class="s">"%d: 'E'</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
<a name="code--ex13.c-pyg.html-24"></a>                <span class="k">break</span><span class="p">;</span>
<a name="code--ex13.c-pyg.html-25"></a>
<a name="code--ex13.c-pyg.html-26"></a>            <span class="k">case</span> <span class="sc">'i'</span>:
<a name="code--ex13.c-pyg.html-27"></a>            <span class="k">case</span> <span class="sc">'I'</span>:
<a name="code--ex13.c-pyg.html-28"></a>                <span class="n">printf</span><span class="p">(</span><span class="s">"%d: 'I'</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
<a name="code--ex13.c-pyg.html-29"></a>                <span class="k">break</span><span class="p">;</span>
<a name="code--ex13.c-pyg.html-30"></a>
<a name="code--ex13.c-pyg.html-31"></a>            <span class="k">case</span> <span class="sc">'o'</span>:
<a name="code--ex13.c-pyg.html-32"></a>            <span class="k">case</span> <span class="sc">'O'</span>:
<a name="code--ex13.c-pyg.html-33"></a>                <span class="n">printf</span><span class="p">(</span><span class="s">"%d: 'O'</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
<a name="code--ex13.c-pyg.html-34"></a>                <span class="k">break</span><span class="p">;</span>
<a name="code--ex13.c-pyg.html-35"></a>
<a name="code--ex13.c-pyg.html-36"></a>            <span class="k">case</span> <span class="sc">'u'</span>:
<a name="code--ex13.c-pyg.html-37"></a>            <span class="k">case</span> <span class="sc">'U'</span>:
<a name="code--ex13.c-pyg.html-38"></a>                <span class="n">printf</span><span class="p">(</span><span class="s">"%d: 'U'</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
<a name="code--ex13.c-pyg.html-39"></a>                <span class="k">break</span><span class="p">;</span>
<a name="code--ex13.c-pyg.html-40"></a>
<a name="code--ex13.c-pyg.html-41"></a>            <span class="k">case</span> <span class="sc">'y'</span>:
<a name="code--ex13.c-pyg.html-42"></a>            <span class="k">case</span> <span class="sc">'Y'</span>:
<a name="code--ex13.c-pyg.html-43"></a>                <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
<a name="code--ex13.c-pyg.html-44"></a>                    <span class="c1">// it's only sometimes Y</span>
<a name="code--ex13.c-pyg.html-45"></a>                    <span class="n">printf</span><span class="p">(</span><span class="s">"%d: 'Y'</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
<a name="code--ex13.c-pyg.html-46"></a>                <span class="p">}</span>
<a name="code--ex13.c-pyg.html-47"></a>                <span class="k">break</span><span class="p">;</span>
<a name="code--ex13.c-pyg.html-48"></a>
<a name="code--ex13.c-pyg.html-49"></a>            <span class="nl">default:</span>
<a name="code--ex13.c-pyg.html-50"></a>                <span class="n">printf</span><span class="p">(</span><span class="s">"%d: %c is not a vowel</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">letter</span><span class="p">);</span>
<a name="code--ex13.c-pyg.html-51"></a>        <span class="p">}</span>
<a name="code--ex13.c-pyg.html-52"></a>    <span class="p">}</span>
<a name="code--ex13.c-pyg.html-53"></a>
<a name="code--ex13.c-pyg.html-54"></a>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<a name="code--ex13.c-pyg.html-55"></a><span class="p">}</span>
</pre></div><p>In this program we take a single command line argument and print out all
of the vowels in an incredibly tedious way to demonstrate
a <tt class="docutils literal"><span class="pre">switch-statement</span></tt>.  Here's how the <tt class="docutils literal"><span class="pre">switch-statement</span></tt>
works:</p>
<ul class="simple">
<li>The compiler marks the place in the program where the
<tt class="docutils literal"><span class="pre">switch-statement</span></tt> starts, let's call this location Y.</li>
<li>It then evaluates the expression in <tt class="docutils literal">switch(letter)</tt> to
come up with a number.  In this case the number will be the
raw ASCII code of the letter in <tt class="docutils literal">argv[1]</tt>.</li>
<li>The compiler has also translated each of the <tt class="docutils literal">case</tt>
blocks like <tt class="docutils literal">case 'A':</tt> into a location in the program
that is that far away.  So the code under <tt class="docutils literal">case 'A'</tt> is
at Y+'A' in the program.</li>
<li>It then does the math to figure out where Y+letter is
located in the <tt class="docutils literal"><span class="pre">switch-statement</span></tt>, and if it's too
far then it adjusts it to Y+default.</li>
<li>Once it knows the location, the program "jumps" to that spot
in the code, and then continues running.  This is why you have
<tt class="docutils literal">break</tt> on some of the <tt class="docutils literal">case</tt> blocks, but not others.</li>
<li>If <tt class="docutils literal">'a'</tt> is entered, then it jumps to <tt class="docutils literal">case 'a'</tt>, there's
no break so it "falls through" to the one right under it <tt class="docutils literal">case 'A'</tt>
which has code and a <tt class="docutils literal">break</tt>.</li>
<li>Finally it runs this code, hits the break then exits out of the
<tt class="docutils literal"><span class="pre">switch-statement</span></tt> entirely.</li>
</ul>
<p>This is a deep dive into how the <tt class="docutils literal"><span class="pre">switch-statement</span></tt> works, but
in practice you just have to remember a few simple rules:</p>
<ul class="simple">
<li>Always include a <tt class="docutils literal">default:</tt> branch so that you catch
any missing inputs.</li>
<li>Don't allow "fall through" unless you really want it, and
it's a good idea to add a comment <tt class="docutils literal">//fallthrough</tt> so
people know it's on purpose.</li>
<li>Always write the <tt class="docutils literal">case</tt> and the <tt class="docutils literal">break</tt> before
you write the code that goes in it.</li>
<li>Try to just use <tt class="docutils literal"><span class="pre">if-statements</span></tt> instead if you can.</li>
</ul>
<div class="section" id="what-you-should-see">
<h1>What You Should See</h1>
<p>Here's an example of me playing with this, and also demonstrating
various ways to pass the argument in:</p>
<div class="highlight"><pre><a name="code--ex13.sh-session-pyg.html-1"></a><span class="gp">$</span> make ex13
<a name="code--ex13.sh-session-pyg.html-2"></a><span class="go">cc -Wall -g    ex13.c   -o ex13</span>
<a name="code--ex13.sh-session-pyg.html-3"></a><span class="gp">$</span> ./ex13
<a name="code--ex13.sh-session-pyg.html-4"></a><span class="go">ERROR: You need one argument.</span>
<a name="code--ex13.sh-session-pyg.html-5"></a><span class="gp">$</span>
<a name="code--ex13.sh-session-pyg.html-6"></a><span class="gp">$</span> ./ex13 Zed
<a name="code--ex13.sh-session-pyg.html-7"></a><span class="go">0: Z is not a vowel</span>
<a name="code--ex13.sh-session-pyg.html-8"></a><span class="go">1: 'E'</span>
<a name="code--ex13.sh-session-pyg.html-9"></a><span class="go">2: d is not a vowel</span>
<a name="code--ex13.sh-session-pyg.html-10"></a><span class="gp">$</span>
<a name="code--ex13.sh-session-pyg.html-11"></a><span class="gp">$</span> ./ex13 Zed Shaw
<a name="code--ex13.sh-session-pyg.html-12"></a><span class="go">ERROR: You need one argument.</span>
<a name="code--ex13.sh-session-pyg.html-13"></a><span class="gp">$</span>
<a name="code--ex13.sh-session-pyg.html-14"></a><span class="gp">$</span> ./ex13 <span class="s2">"Zed Shaw"</span>
<a name="code--ex13.sh-session-pyg.html-15"></a><span class="go">0: Z is not a vowel</span>
<a name="code--ex13.sh-session-pyg.html-16"></a><span class="go">1: 'E'</span>
<a name="code--ex13.sh-session-pyg.html-17"></a><span class="go">2: d is not a vowel</span>
<a name="code--ex13.sh-session-pyg.html-18"></a><span class="go">3:   is not a vowel</span>
<a name="code--ex13.sh-session-pyg.html-19"></a><span class="go">4: S is not a vowel</span>
<a name="code--ex13.sh-session-pyg.html-20"></a><span class="go">5: h is not a vowel</span>
<a name="code--ex13.sh-session-pyg.html-21"></a><span class="go">6: 'A'</span>
<a name="code--ex13.sh-session-pyg.html-22"></a><span class="go">7: w is not a vowel</span>
<a name="code--ex13.sh-session-pyg.html-23"></a><span class="gp">$</span>
</pre></div><p>Remember that there's that <tt class="docutils literal"><span class="pre">if-statement</span></tt> at the top that
exits with a <tt class="docutils literal">return 1;</tt> when you don't give enough arguments.
Doing a return that's not 0 is how you indicate to the OS that
the program had an error.  Any value that's greater than 0 can be
tested for in scripts and other programs to figure out what
happened.</p>
</div>
<div class="section" id="how-to-break-it">
<h1>How To Break It</h1>
<p>It is <em>incredibly</em> easy to break a <tt class="docutils literal"><span class="pre">switch-statement</span></tt>.
Here's just a few of the ways you can mess one of these up:</p>
<ul class="simple">
<li>Forget a <tt class="docutils literal">break</tt> and it'll run two or more
blocks of code you don't want it to run.</li>
<li>Forget a <tt class="docutils literal">default</tt> and have it silently
ignore values you forgot.</li>
<li>Accidentally put in variable into the <tt class="docutils literal">switch</tt> that
evaluates to something unexpected, like an <tt class="docutils literal">int</tt>
that becomes weird values.</li>
<li>Use uninitialized values in the <tt class="docutils literal">switch</tt>.</li>
</ul>
<p>You can also break this program in a few other ways.  See if you
can bust it yourself.</p>
</div>
<div class="section" id="extra-credit">
<h1>Extra Credit</h1>
<ul class="simple">
<li>Write another program that uses math on the letter to
convert it to lowercase, and then remove all the extraneous
uppercase letters in the switch.</li>
<li>Use the <tt class="docutils literal">','</tt> (comma) to initialize <tt class="docutils literal">letter</tt>
in the <tt class="docutils literal"><span class="pre">for-loop</span></tt>.</li>
<li>Make it handle all of the arguments you pass it with
yet another <tt class="docutils literal"><span class="pre">for-loop</span></tt>.</li>
<li>Convert this <tt class="docutils literal"><span class="pre">switch-statement</span></tt> to an <tt class="docutils literal"><span class="pre">if-statement</span></tt>.
Which do you like better?</li>
<li>In the case for 'Y' I have the break outside the <tt class="docutils literal"><span class="pre">if-statement</span></tt>. What's the impact of this
and what happens if you move it inside the <tt class="docutils literal"><span class="pre">if-statement</span></tt>. Prove to yourself that you're right.</li>
</ul>
</div>
    </div>

    <div class="one columns" id="right-nav">
        <center>
        <p><a href="http://c.learncodethehardway.org/book/"><img src="Exercise%2013%20%20Switch%20Statement_files/48_structure.png"></a></p>
        <p><a href="mailto:help@learncodethehardway.org"><img src="Exercise%2013%20%20Switch%20Statement_files/48_email.png"></a></p>
        <p><a href="#faq"><img src="Exercise%2013%20%20Switch%20Statement_files/48_faq.png"></a></p>
        <p><a href="http://inculcate.me/school/courses/4/"><img src="Exercise%2013%20%20Switch%20Statement_files/48_video.png"></a></p>
        </center>
    </div>
    <div class="twelve columns" id="footer">
        <div class="four columns" id="footer-block">
            <p>
            <a href="http://learncodethehardway.org/">Copyright (C) 2010 Zed. A. Shaw</a>
            </p>
        </div>
        <div class="four columns" id="footer-block">
            <p>
            </p>
        </div>
        <div class="three columns" id="footer-block">
            <p>
            <a href="http://c.learncodethehardway.org/credits.html">Credits</a>
            </p>
        </div>
        <div class="one columns">
            &nbsp;
        </div>
    </div>

  <!-- Included JS Files (Compressed) -->
  <script src="Exercise%2013%20%20Switch%20Statement_files/jquery.js"></script>
  <script src="Exercise%2013%20%20Switch%20Statement_files/foundation.js"></script>
  
  <!-- Initialize JS Plugins -->
  <script src="Exercise%2013%20%20Switch%20Statement_files/app.js"></script>

  <script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-24168052-8']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

  </script>


</div></body></html>