<!DOCTYPE html>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if gt IE 8]><!-->
<html style="" class=" js no-touch svg inlinesvg svgclippaths no-ie8compat js no-touch svg inlinesvg svgclippaths no-ie8compat" lang="en"><!--<![endif]--><head>
  <meta charset="utf-8">

  <!-- Set the viewport width to device width for mobile -->
  <meta name="viewport" content="width=device-width">

  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="generator" content="Docutils 0.10: http://docutils.sourceforge.net/">
<title>Exercise 10: Arrays Of Strings, Looping</title>

  <!-- Included CSS Files (Compressed) -->
  <link rel="stylesheet" href="Exercise%2010%20%20Arrays%20Of%20Strings,%20Looping_files/foundation.css">
  <link rel="stylesheet" href="Exercise%2010%20%20Arrays%20Of%20Strings,%20Looping_files/pygments.css">
  <link rel="stylesheet" href="Exercise%2010%20%20Arrays%20Of%20Strings,%20Looping_files/app.css">

  <script src="Exercise%2010%20%20Arrays%20Of%20Strings,%20Looping_files/ga.js" async="" type="text/javascript"></script><script src="Exercise%2010%20%20Arrays%20Of%20Strings,%20Looping_files/modernizr.js"></script>

  <!-- IE Fix for HTML5 Tags -->
  <!--[if lt IE 9]>
    <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->

</head>
<body>

  <div class="row">
      <div class="twelve columns" id="header">
          <div class="topbar">
              <div class="global-nav">
                  <div class="four columns" id="header-block">
                      <p><a href="http://c.learncodethehardway.org/">Learn C The Hard Way</a></p>
                  </div>
                  <div class="four columns" id="header-block">
                      <p style="color: white"><a href="http://inculcate.me/school/courses/4/">Online Video Course Plus PDFs $29</a></p>
                  </div>
                  <div class="four columns" id="header-block">
                      <p>
                      <a href="http://learnpythonthehardway.org/">Python</a> |
                      <a href="http://ruby.learncodethehardway.org/">Ruby</a> |
                      <a href="http://c.learncodethehardway.org/">C</a> |
                      <a href="http://sql.learncodethehardway.org/">SQL</a> |
                      <a href="http://regex.learncodethehardway.org/">Regex</a> 
                      </p>
                  </div>
              </div>
          </div>
          <h1 class="title">Exercise 10: Arrays Of Strings, Looping</h1>
      </div>
  </div>

  <div class="row">
    <div class="eleven columns">
        <p>You can make an array of various types, and have the idea down that a
"string" and an "array of bytes" are the same thing.  The next thing is
to take this one step further and do an array that has strings in it.
We'll also introduce your first looping construct, the <tt class="docutils literal"><span class="pre">for-loop</span></tt>
to help print out this new data structure.</p>
<p>The fun part of this is that there's been an array of strings hiding in
your programs for a while now, the <tt class="docutils literal">char *argv[]</tt> in the <tt class="docutils literal">main</tt>
function arguments.  Here's code that will print out any command line
arguments you pass it:</p>
<div class="highlight"><pre><a name="code--ex10.c-pyg.html-1"></a><span class="cp">#include &lt;stdio.h&gt;</span>
<a name="code--ex10.c-pyg.html-2"></a>
<a name="code--ex10.c-pyg.html-3"></a><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<a name="code--ex10.c-pyg.html-4"></a><span class="p">{</span>
<a name="code--ex10.c-pyg.html-5"></a>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<a name="code--ex10.c-pyg.html-6"></a>
<a name="code--ex10.c-pyg.html-7"></a>    <span class="c1">// go through each string in argv</span>
<a name="code--ex10.c-pyg.html-8"></a>    <span class="c1">// why am I skipping argv[0]?</span>
<a name="code--ex10.c-pyg.html-9"></a>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">argc</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
<a name="code--ex10.c-pyg.html-10"></a>        <span class="n">printf</span><span class="p">(</span><span class="s">"arg %d: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
<a name="code--ex10.c-pyg.html-11"></a>    <span class="p">}</span>
<a name="code--ex10.c-pyg.html-12"></a>
<a name="code--ex10.c-pyg.html-13"></a>    <span class="c1">// let's make our own array of strings</span>
<a name="code--ex10.c-pyg.html-14"></a>    <span class="kt">char</span> <span class="o">*</span><span class="n">states</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
<a name="code--ex10.c-pyg.html-15"></a>        <span class="s">"California"</span><span class="p">,</span> <span class="s">"Oregon"</span><span class="p">,</span>
<a name="code--ex10.c-pyg.html-16"></a>        <span class="s">"Washington"</span><span class="p">,</span> <span class="s">"Texas"</span>
<a name="code--ex10.c-pyg.html-17"></a>    <span class="p">};</span>
<a name="code--ex10.c-pyg.html-18"></a>    <span class="kt">int</span> <span class="n">num_states</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
<a name="code--ex10.c-pyg.html-19"></a>
<a name="code--ex10.c-pyg.html-20"></a>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_states</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
<a name="code--ex10.c-pyg.html-21"></a>        <span class="n">printf</span><span class="p">(</span><span class="s">"state %d: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">states</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
<a name="code--ex10.c-pyg.html-22"></a>    <span class="p">}</span>
<a name="code--ex10.c-pyg.html-23"></a>
<a name="code--ex10.c-pyg.html-24"></a>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<a name="code--ex10.c-pyg.html-25"></a><span class="p">}</span>
</pre></div><p>The format of a <tt class="docutils literal"><span class="pre">for-loop</span></tt> is this:</p>
<pre class="literal-block">for(INITIALIZER; TEST; INCREMENTER) {
    CODE;
}
</pre>
<p>Here's how the <tt class="docutils literal"><span class="pre">for-loop</span></tt> works:</p>
<ul class="simple">
<li>The <tt class="docutils literal">INITIALIZER</tt> is code that is run to setup the loop, in this
case <tt class="docutils literal">i = 0</tt>.</li>
<li>Next the <tt class="docutils literal">TEST</tt> boolean expression is checked, and if it's false (0)
then <tt class="docutils literal">CODE</tt> is skipped, doing nothing.</li>
<li>The <tt class="docutils literal">CODE</tt> runs, does whatever it does.</li>
<li>After the <tt class="docutils literal">CODE</tt> runs, the <tt class="docutils literal">INCREMENTER</tt> part is run, usually
incrementing something, like in <tt class="docutils literal">i++</tt>.</li>
<li>And it continues again with Step 2 until the <tt class="docutils literal">TEST</tt> is false (0).</li>
</ul>
<p>This <tt class="docutils literal"><span class="pre">for-loop</span></tt> is going through the command line arguments
using <tt class="docutils literal">argc</tt> and <tt class="docutils literal">argv</tt> like this:</p>
<ul class="simple">
<li>The OS passes each command line argument as a string in the <tt class="docutils literal">argv</tt>
array.  The program's name (./ex10) is at 0, with the rest coming after it.</li>
<li>The OS also sets <tt class="docutils literal">argc</tt> to the number of arguments in the <tt class="docutils literal">argv</tt>
array so you can process them without going past the end.  Remember that if you
give one argument, the program's name is the first, so argc is 2.</li>
<li>The <tt class="docutils literal"><span class="pre">for-loop</span></tt> sets up with <tt class="docutils literal">i = 1</tt> in the initializer.</li>
<li>It then tests that <tt class="docutils literal">i</tt> is less than <tt class="docutils literal">argc</tt> with the
test <tt class="docutils literal">i &lt; argc</tt>. Since initially $1 &lt; 2$ it will pass.</li>
<li>It then runs the code which just prints out the <tt class="docutils literal">i</tt> and
uses <tt class="docutils literal">i</tt> to index into <tt class="docutils literal">argv</tt>.</li>
<li>The incrementer is then run using the <tt class="docutils literal">i++</tt> syntax, which is
a handy way of writing <tt class="docutils literal">i = i + 1</tt>.</li>
<li>This then repeats until <tt class="docutils literal">i &lt; argc</tt> is finally false (0) when
the loop exits and the program continues on.</li>
</ul>
<div class="section" id="what-you-should-see">
<h1>What You Should See</h1>
<p>To play with this program you have to run it two ways.  The first way is to
pass in some command line arguments so that <tt class="docutils literal">argc</tt> and <tt class="docutils literal">argv</tt>
get set.  The second is to run it with no arguments so you can see that
the first <tt class="docutils literal"><span class="pre">for-loop</span></tt> doesn't run since <tt class="docutils literal">i &lt; argc</tt> will be false.</p>
<div class="highlight"><pre><a name="code--ex10.sh-session-pyg.html-1"></a><span class="gp">$</span> make ex10
<a name="code--ex10.sh-session-pyg.html-2"></a><span class="go">cc -Wall -g    ex10.c   -o ex10</span>
<a name="code--ex10.sh-session-pyg.html-3"></a><span class="gp">$</span> ./ex10 i am a bunch of arguments
<a name="code--ex10.sh-session-pyg.html-4"></a><span class="go">arg 1: i</span>
<a name="code--ex10.sh-session-pyg.html-5"></a><span class="go">arg 2: am</span>
<a name="code--ex10.sh-session-pyg.html-6"></a><span class="go">arg 3: a</span>
<a name="code--ex10.sh-session-pyg.html-7"></a><span class="go">arg 4: bunch</span>
<a name="code--ex10.sh-session-pyg.html-8"></a><span class="go">arg 5: of</span>
<a name="code--ex10.sh-session-pyg.html-9"></a><span class="go">arg 6: arguments</span>
<a name="code--ex10.sh-session-pyg.html-10"></a><span class="go">state 0: California</span>
<a name="code--ex10.sh-session-pyg.html-11"></a><span class="go">state 1: Oregon</span>
<a name="code--ex10.sh-session-pyg.html-12"></a><span class="go">state 2: Washington</span>
<a name="code--ex10.sh-session-pyg.html-13"></a><span class="go">state 3: Texas</span>
<a name="code--ex10.sh-session-pyg.html-14"></a><span class="gp">$</span>
<a name="code--ex10.sh-session-pyg.html-15"></a><span class="gp">$</span> ./ex10
<a name="code--ex10.sh-session-pyg.html-16"></a><span class="go">state 0: California</span>
<a name="code--ex10.sh-session-pyg.html-17"></a><span class="go">state 1: Oregon</span>
<a name="code--ex10.sh-session-pyg.html-18"></a><span class="go">state 2: Washington</span>
<a name="code--ex10.sh-session-pyg.html-19"></a><span class="go">state 3: Texas</span>
<a name="code--ex10.sh-session-pyg.html-20"></a><span class="gp">$</span>
</pre></div><div class="section" id="understanding-arrays-of-strings">
<h2>Understanding Arrays Of Strings</h2>
<p>From this you should be able to figure out that in C you make an "array of
strings" by combining the <tt class="docutils literal">char *str = "blah"</tt> syntax with the
<tt class="docutils literal">char str[] = <span class="pre">{'b','l','a','h'}</span></tt> syntax to construct a 2-dimensional
array.  The syntax <tt class="docutils literal">char *states[] = <span class="pre">{...}</span></tt> on line 14 is this
2-dimension combination, with each string being one element, and each
character in the string being another.</p>
<p>Confusing? The concept of multiple dimensions is something most
people never think about so what you should do is build this
array of strings on paper:</p>
<ul class="simple">
<li>Make a grid with the index of each <em>string</em> on the left.</li>
<li>Then put the index of each <em>character</em> on the top.</li>
<li>Then, fill in the squares in the middle with what single character
goes in that cell.</li>
<li>Once you have the grid, trace through the code manually
using this grid of paper.</li>
</ul>
<p>Another way to figure this is out is to build the same structure
in a programming language you are more familiar with like Python or
Ruby.</p>
</div>
</div>
<div class="section" id="how-to-break-it">
<h1>How To Break It</h1>
<ul class="simple">
<li>Take your favorite other language, and use it to run this program, but
with as many command line arguments as possible.  See if you can bust it
by giving it way too many arguments.</li>
<li>Initialize <tt class="docutils literal">i</tt> to 0 and see what that does.  Do you have to adjust
<tt class="docutils literal">argc</tt> as well or does it just work?  Why does 0-based indexing work
here?</li>
<li>Set <tt class="docutils literal">num_states</tt> wrong so that it's a higher value and see what
it does.</li>
</ul>
</div>
<div class="section" id="extra-credit">
<h1>Extra Credit</h1>
<ul class="simple">
<li>Figure out what kind of code you can put into the parts of a <tt class="docutils literal"><span class="pre">for-loop</span></tt>.</li>
<li>Look up how to use the <tt class="docutils literal">','</tt> (comma) character to separate multiple
statements in the parts of the <tt class="docutils literal"><span class="pre">for-loop</span></tt>, but between the <tt class="docutils literal">';'</tt> (semicolon) characters.</li>
<li>Read what a <tt class="docutils literal">NULL</tt> is and try to use it in one of the elements of the
<tt class="docutils literal">states</tt> array to see what it'll print.</li>
<li>See if you can assign an element from the <tt class="docutils literal">states</tt> array to the
<tt class="docutils literal">argv</tt> array before printing both.  Try the inverse.</li>
</ul>
</div>
    </div>

    <div class="one columns" id="right-nav">
        <center>
        <p><a href="http://c.learncodethehardway.org/book/"><img src="Exercise%2010%20%20Arrays%20Of%20Strings,%20Looping_files/48_structure.png"></a></p>
        <p><a href="mailto:help@learncodethehardway.org"><img src="Exercise%2010%20%20Arrays%20Of%20Strings,%20Looping_files/48_email.png"></a></p>
        <p><a href="#faq"><img src="Exercise%2010%20%20Arrays%20Of%20Strings,%20Looping_files/48_faq.png"></a></p>
        <p><a href="http://inculcate.me/school/courses/4/"><img src="Exercise%2010%20%20Arrays%20Of%20Strings,%20Looping_files/48_video.png"></a></p>
        </center>
    </div>
    <div class="twelve columns" id="footer">
        <div class="four columns" id="footer-block">
            <p>
            <a href="http://learncodethehardway.org/">Copyright (C) 2010 Zed. A. Shaw</a>
            </p>
        </div>
        <div class="four columns" id="footer-block">
            <p>
            </p>
        </div>
        <div class="three columns" id="footer-block">
            <p>
            <a href="http://c.learncodethehardway.org/credits.html">Credits</a>
            </p>
        </div>
        <div class="one columns">
            &nbsp;
        </div>
    </div>

  <!-- Included JS Files (Compressed) -->
  <script src="Exercise%2010%20%20Arrays%20Of%20Strings,%20Looping_files/jquery.js"></script>
  <script src="Exercise%2010%20%20Arrays%20Of%20Strings,%20Looping_files/foundation.js"></script>
  
  <!-- Initialize JS Plugins -->
  <script src="Exercise%2010%20%20Arrays%20Of%20Strings,%20Looping_files/app.js"></script>

  <script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-24168052-8']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

  </script>


</div></body></html>